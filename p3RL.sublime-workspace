{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"tar",
				"target_y"
			],
			[
				"get",
				"get_targetable_entities_in_range"
			],
			[
				"targ",
				"targetable_entity"
			],
			[
				"test_pl",
				"test_player_fighter"
			],
			[
				"target",
				"targetable_entity"
			],
			[
				"per",
				"performer_component"
			],
			[
				"feat_",
				"feat_damage_modifier"
			],
			[
				"ta",
				"targeting_message"
			],
			[
				"Effe",
				"EffectNames"
			],
			[
				"create",
				"create_mockchar_5"
			],
			[
				"assert",
				"assertTrue"
			],
			[
				"test_ar",
				"test_arrows_2"
			],
			[
				"Eq",
				"EquippableFactory"
			],
			[
				"equip",
				"equipped_items"
			],
			[
				"Euip",
				"Equipment"
			],
			[
				"Equ",
				"EquippableFactory"
			],
			[
				"Ammu",
				"AmmunitionTypes"
			],
			[
				"missile",
				"missile_weapon_ammunition_lookup"
			],
			[
				"curren",
				"current_targeting_consumable"
			],
			[
				"current",
				"current_targeting_consumable"
			],
			[
				"curre",
				"current_targeting_consumable"
			],
			[
				"defend",
				"defend_missile_attack"
			],
			[
				"defe",
				"defender"
			],
			[
				"get_cu",
				"get_current_missile_damage"
			],
			[
				"melee_",
				"melee_weapon"
			],
			[
				"get_hit",
				"get_hit_modifier_from_equipment"
			],
			[
				"missile_",
				"missile_targeting_weapon"
			],
			[
				"missile_t",
				"missile_targeting"
			],
			[
				"missile_tar",
				"missile_targeting_weapon"
			],
			[
				"spell_",
				"spell_targeting_result"
			],
			[
				"make_fi",
				"make_fireball_scroll"
			],
			[
				"player",
				"player_turn_result"
			],
			[
				"weapon",
				"weapon_category"
			],
			[
				"test",
				"test_entity"
			],
			[
				"skill_check_",
				"skill_check_function_2"
			],
			[
				"get_p",
				"get_physical_damage_modifier_from_equipment"
			],
			[
				"get_hit_",
				"get_hit_modifier_from_status_effects"
			],
			[
				"get_phy",
				"get_physical_damage_modifier_from_status_effects"
			],
			[
				"make_bless",
				"make_bless_spell"
			],
			[
				"kwargs",
				"kwargs"
			],
			[
				"weapon_s",
				"weapon_skill_num"
			],
			[
				"equipp",
				"equippable_entity"
			],
			[
				"prev",
				"previous_game_state"
			],
			[
				"player_turn",
				"player_turn_results"
			],
			[
				"KEY_E",
				"KEY_ENTER"
			],
			[
				"test_pot",
				"test_potion2"
			],
			[
				"ident",
				"identified_scrolls"
			],
			[
				"scroll_desc",
				"scroll_description_links"
			],
			[
				"scr",
				"scroll_descriptions"
			],
			[
				"scroll",
				"scroll_descriptions"
			],
			[
				"consu",
				"consumable_type"
			],
			[
				"test_",
				"test_identified_component"
			],
			[
				"get_",
				"get_display_name"
			],
			[
				"plate_",
				"plate_armor_item"
			],
			[
				"sca",
				"scale_armor_item"
			],
			[
				"chain",
				"chain_armor_item"
			],
			[
				"leat",
				"leather_armor_item"
			],
			[
				"padd",
				"padded_armor_item"
			],
			[
				"tower_s",
				"tower_shield_item"
			],
			[
				"small_",
				"small_shield_item"
			],
			[
				"bol",
				"bolts_item"
			],
			[
				"obs",
				"obsidian_arrows_item"
			],
			[
				"greats",
				"greatsword_item"
			],
			[
				"heal",
				"heal_book_consumable"
			],
			[
				"fireb",
				"fireball_book_consumable"
			],
			[
				"confu",
				"confusion_scroll_consumable"
			],
			[
				"fire",
				"fireball_scroll_consumable"
			],
			[
				"lig",
				"lightning_scroll_consumable"
			],
			[
				"learn",
				"learn_heal"
			],
			[
				"attack_modifier",
				"attack_modifier"
			],
			[
				"heal_bo",
				"heal_book_name"
			],
			[
				"fir",
				"fireball_book_name"
			],
			[
				"padded",
				"padded_armor_entity"
			],
			[
				"player_",
				"player_turn_results"
			],
			[
				"time_",
				"time_results"
			],
			[
				"ligh",
				"lightning_scroll_name"
			],
			[
				"test_ent",
				"test_entity_2"
			],
			[
				"get_basic",
				"get_basic_swing_damage"
			],
			[
				"get_b",
				"get_basic_thrust_damage"
			],
			[
				"effect",
				"effect_list"
			],
			[
				"ef",
				"effect_list"
			],
			[
				"test_effe",
				"test_effect_2"
			],
			[
				"ammu",
				"ammunition_name"
			],
			[
				"id",
				"identified"
			],
			[
				"identi",
				"identified_potions"
			],
			[
				"potion",
				"potion_links"
			],
			[
				"potion_descr",
				"potion_description_links"
			],
			[
				"Item",
				"ItemFactory"
			],
			[
				"effec",
				"effects_component"
			],
			[
				"pot",
				"potion_description_links"
			],
			[
				"potion_",
				"potion_description_links"
			],
			[
				"potion_des",
				"potion_description_links"
			],
			[
				"text",
				"text_menu"
			],
			[
				"shiel",
				"shield_name"
			],
			[
				"miss",
				"missile_weapon"
			],
			[
				"get_skill",
				"get_skill_check"
			],
			[
				"equi",
				"equipment"
			],
			[
				"makeSw",
				"makeGreatSword"
			],
			[
				"equippab",
				"EquippableFactory"
			],
			[
				"makeFire",
				"makeFireballScroll"
			],
			[
				"mis",
				"missile_weapon"
			],
			[
				"player_tur",
				"player_turn_results"
			],
			[
				"missile_d",
				"missile_damage_bonus"
			],
			[
				"cross",
				"crossbow_equippable"
			],
			[
				"rapier",
				"rapier_melee_weapon"
			],
			[
				"melee",
				"melee_weapon"
			],
			[
				"great",
				"greatsword_equippable"
			],
			[
				"mele",
				"melee_attack_type"
			],
			[
				"melee_d",
				"melee_damage_bonus"
			],
			[
				"melee_dam",
				"melee_damage_type"
			],
			[
				"temp_",
				"temp_equippable_missile"
			],
			[
				"Equipp",
				"EquippableFactory"
			],
			[
				"defense",
				"defense_choice"
			],
			[
				"weapon_",
				"weapon_skill_num"
			],
			[
				"test_char",
				"test_char_pd"
			],
			[
				"Euipp",
				"EquippableFactory"
			],
			[
				"test_equip",
				"test_equipment_component"
			],
			[
				"test_equp",
				"test_equipment_component"
			],
			[
				"Equip",
				"EquipmentSlots"
			],
			[
				"skill",
				"skill_target"
			],
			[
				"payer",
				"player_turn_result"
			],
			[
				"test_figh",
				"test_fighter_component"
			],
			[
				"diffi",
				"difficulty_modifiers"
			],
			[
				"fighter",
				"fighter_component"
			],
			[
				"eq",
				"equipment"
			],
			[
				"get_curr",
				"get_current_melee_damage"
			],
			[
				"equippe",
				"equipped_items"
			],
			[
				"ammunition",
				"ammunition"
			]
		]
	},
	"buffers":
	[
		{
			"file": "loader_functions/constants.py",
			"settings":
			{
				"buffer_size": 2585,
				"line_ending": "Windows"
			}
		},
		{
			"file": "loader_functions/initialize_new_game.py",
			"settings":
			{
				"buffer_size": 5307,
				"line_ending": "Windows"
			}
		},
		{
			"file": "entity.py",
			"settings":
			{
				"buffer_size": 2145,
				"line_ending": "Windows"
			}
		},
		{
			"file": "engine.py",
			"settings":
			{
				"buffer_size": 5759,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/input_process_system.py",
			"settings":
			{
				"buffer_size": 8104,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 75 files for \"performed\"\n\nC:\\dev\\p3roguelike\\p3RL.sublime-workspace:\n  577  		},\n  578  		{\n  579: 			\"contents\": \"Searching 75 files for \\\"spells_menu\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\menus.py:\\n   19  	menu(con, header, options, inventory_width, screen_width, screen_height)\\n   20  \\n   21: def spells_menu(con, header, spells_width, screen_width, screen_height, player):\\n   22  	if len(player.caster.spells) == 0:\\n   23  		header = \\\"You don't know any spells yet.\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\render_functions.py:\\n    2  from enum import Enum\\n    3  from game_states import GameStates\\n    4: from menus import inventory_menu, level_up_menu, character_screen, spells_menu, potion_menu, equipment_menu\\n    5  from systems.name_system import get_display_name\\n    6  from loader_functions.tile_codes import *\\n    .\\n   97  \\n   98  	elif game_state == GameStates.SPELLS_SCREEN:\\n   99: 		spells_menu(con, \\\"Choose a spell to cast...\\\", 50, screen_width, screen_height, player)\\n  100  \\n  101  	elif game_state == GameStates.POTION_SCREEN:\\n\\n3 matches across 2 files\\n\\n\\nSearching 75 files for \\\"spell_targeting\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\p3RL.sublime-workspace:\\n   98  			[\\n   99  				\\\"spell_\\\",\\n  100: 				\\\"spell_targeting_result\\\"\\n  101  			],\\n  102  			[\\n  ...\\n 1056  			\\\"spell_t\\\",\\n 1057  			\\\"targeting_item\\\",\\n 1058: 			\\\"spell_targeting\\\",\\n 1059  			\\\"action_free = False\\\",\\n 1060  			\\\"game_state = GameStates.PLAYERS_TURN\\\",\\n ....\\n 1105  			\\\"missile_targ\\\",\\n 1106  			\\\"print(\\\",\\n 1107: 			\\\"spell_targeting\\\",\\n 1108  			\\\"game_state = GameStates.TARGETING\\\",\\n 1109  			\\\"action_free\\\",\\n 1110  			\\\"targeting_item\\\",\\n 1111: 			\\\"spell_targeting\\\",\\n 1112  			\\\":\\\\n\\\",\\n 1113  			\\\"handle_de\\\",\\n ....\\n 1122  			\\\"con\\\",\\n 1123  			\\\"targeting\\\",\\n 1124: 			\\\"spell_targeting\\\",\\n 1125  			\\\"spell_tar\\\",\\n 1126  			\\\"spell_targ\\\",\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\results_process_system.py:\\n   14  		item_dropped = player_turn_result.get('item_dropped')\\n   15  		targeting = player_turn_result.get('targeting')\\n   16: 		spell_targeting_result = player_turn_result.get('spell_targeting')\\n   17  		targeting_cancelled = player_turn_result.get('targeting_cancelled')\\n   18  		equip = player_turn_result.get('equip')\\n   ..\\n   40  			targets.current_targeting_consumable = targeting\\n   41  			message_log.add_message(targets.current_targeting_consumable.consumable.targeting_message)\\n   42: 		if spell_targeting_result:\\n   43  			print(\\\"result process system picked up the spell targeting result\\\")\\n   44  			previous_game_state = GameStates.PLAYERS_TURN\\n   45  			game_state = GameStates.TARGETING\\n   46: 			targets.current_targeting_spell = spell_targeting_result\\n   47  			message_log.add_message(targets.current_targeting_spell.targeting_message)\\n   48  		if missile_targeting:\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\spell_system.py:\\n   24  \\n   25  	if spell.targeting and not (kwargs.get('target_x') or kwargs.get('target_y')):\\n   26: 		print(\\\"spell system is returning spell_targeting\\\")\\n   27: 		results.append({'spell_targeting': spell})\\n   28  	else:\\n   29  		kwargs = {**spell.function_kwargs, **kwargs}\\n\\n11 matches across 3 files\\n\\n\\nSearching 75 files for \\\"stamina\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\components\\\\stats.py:\\n    1  class Stats:\\n    2: 	def __init__(self, Strength=10, Precision=10, Agility=10, Intellect=10, Willpower=10, Stamina=10, Endurance=10):\\n    3  		self.Strength = Strength\\n    4  		self.Precision = Precision\\n    .\\n    6  		self.Intellect = Intellect\\n    7  		self.Willpower = Willpower\\n    8: 		self.Stamina = Stamina\\n    9  		self.Endurance = Endurance\\n   10: 		self.base_max_hp = self.Stamina + self.Endurance\\n   11  		self.hp = self.base_max_hp\\n   12  		self.evade = int((self.Agility + self.Precision) / 4)\\n\\nC:\\\\dev\\\\p3roguelike\\\\feats.py:\\n    1  class Feat:\\n    2: 	def __init__(self, name, display_name, parent_skill, minimum_rank, stamina_cost, use_function, targeting, targeting_message, feat_range, **kwargs):\\n    3  		self.name = name\\n    4  		self.display_name = display_name\\n    5  		self.parent_skill = parent_skill\\n    6  		self.minimum_rank = minimum_rank\\n    7: 		self.stamina_cost = stamina_cost\\n    8  		self.use_function = use_function\\n    9  		self.targeting = targeting\\n\\nC:\\\\dev\\\\p3roguelike\\\\loader_functions\\\\initialize_new_game.py:\\n   72  	defender_component = Defender()\\n   73  	performer_component = Performer()\\n   74: 	stats_component = Stats(Strength=14, Precision=14, Agility=14, Intellect=14, Willpower=14, Stamina=14, Endurance=14)\\n   75  	skills_component = Skills()\\n   76  	skills_component.set_skill_rank(SkillNames.SWORD, 1)\\n\\nC:\\\\dev\\\\p3roguelike\\\\mocks.py:\\n   20  	test_identified = Identified()\\n   21  	test_inventory = Inventory(10)\\n   22: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n   23  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", inventory=test_inventory, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, identified=test_identified)\\n   24  	return test_entity\\n   ..\\n   29  	test_skills_component = Skills()\\n   30  	test_equipment_component = Equipment()\\n   31: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n   32  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\n   33  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\n   ..\\n   44  	test_fighter = Fighter()\\n   45  	test_name = Name(\\\"Mock\\\")\\n   46: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n   47  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter, name=test_name)	\\n   48  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\n   ..\\n   57  	test_sword = EquippableFactory.make_longsword()\\n   58  	test_equipment_component.main_hand = test_sword	\\n   59: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n   60  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\n   61  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\n   ..\\n   72  	test_equipment_component.main_hand = test_sword\\n   73  	test_equipment_component.off_hand = test_shield	\\n   74: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n   75  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\n   76  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\n   ..\\n   87  	test_equipment_component.main_hand = test_sword\\n   88  	test_equipment_component.off_hand = test_shield\\n   89: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n   90  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\n   91  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\n   ..\\n  101  	test_sword = EquippableFactory.make_longsword()\\n  102  	test_equipment_component.main_hand = test_sword\\n  103: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n  104  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\n  105  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\n  ...\\n  117  	test_equipment_component.main_hand = test_sword\\n  118  	test_equipment_component.off_hand = test_shield	\\n  119: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n  120  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\n  121  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\n  ...\\n  130  	test_bow = EquippableFactory.make_shortbow()\\n  131  	test_equipment_component.main_hand = test_bow\\n  132: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n  133  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\n  134  	return test_entity\\n  ...\\n  144  	test_equipment_component.main_hand = test_bow\\n  145  	test_equipment_component.ammunition = test_arrows\\n  146: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n  147  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\n  148  	return test_entity\\n  ...\\n  157  	test_equipment_component.main_hand = test_sword\\n  158  	test_equipment_component.off_hand = test_shield	\\n  159: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=14, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n  160  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\n  161  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\n  ...\\n  167  	test_skills_component = Skills()\\n  168  	test_equipment_component = Equipment()\\n  169: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=13	, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n  170  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component)\\n  171  	test_skills_component.set_skill_rank(SkillNames.UNARMED, 1)\\n\\nC:\\\\dev\\\\p3roguelike\\\\monsters.py:\\n   19  def makeOrc(x, y):\\n   20  	fighter_component = Fighter(xp=35)\\n   21: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n   22  	ai_component = BasicMonster()\\n   23  	equipment_component = Equipment()\\n   ..\\n   40  def makeTroll(x, y):\\n   41  	fighter_component = Fighter(xp=100)\\n   42: 	stats_component = Stats(Strength=12, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n   43  	ai_component = BasicMonster()\\n   44  	equipment_component = Equipment()\\n   ..\\n   58  def makeKobold(x, y):\\n   59  	fighter_component = Fighter(xp=30)\\n   60: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n   61  	ai_component = BasicMonster()\\n   62  	equipment_component = Equipment()\\n\\nC:\\\\dev\\\\p3roguelike\\\\rltests.py:\\n  115  		test_caster = Caster(spells=[], max_mana=50)\\n  116  		test_fighter = Fighter(xp=100)\\n  117: 		test_stats = Stats(Strength=1, Precision=1, Agility=1, Intellect=1, Willpower=1, Stamina=1, Endurance=1)\\n  118  		test_skills = Skills()\\n  119  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", caster=test_caster, fighter=test_fighter, skills=test_skills, stats=test_stats)\\n  ...\\n  180  class StatsTests(unittest.TestCase):\\n  181  	def test_can_create_entity_with_stats(self):\\n  182: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n  183  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", stats=test_stats_component)\\n  184  		self.assertEqual(test_entity.stats, test_stats_component)\\n  185  \\n  186  	def test_can_calculate_hp(self):\\n  187: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n  188  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\"Player\\\", stats=test_stats_component)\\n  189  		self.assertEqual(test_entity.stats.max_hp, 19)\\n  ...\\n  219  \\n  220  	def test_can_get_damage_string(self):\\n  221: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n  222  		test_fighter_component = Fighter(xp=10)\\n  223  		test_equipment = Equipment()\\n  ...\\n  645  	def test_damage_over_time_effects_work(self):\\n  646  		fighter_component = Fighter(xp=100)\\n  647: 		stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\n  648  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, stats=stats_component, fighter=fighter_component)\\n  649  		test_effect = Effect(name=EffectNames.POISON, description=\\\"Poisoned\\\", turns_left=5, damage_per_turn=3)\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\feat_system.py:\\n   17  	results = []\\n   18  \\n   19: 	if feat.stamina_cost > entity.stats.stamina:\\n   20: 		results.append({'message': Message(\\\"You don't have enough stamina to perform that feat.\\\")})\\n   21  		return results\\n   22  \\n   ..\\n   26  	else:\\n   27  		kwargs = {**feat.function_kwargs, **kwargs}\\n   28: 		entity.stats.stamina -= feat.stamina_cost\\n   29  		feat_perform_results = feat.use_function(entity, **kwargs)\\n   30  \\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\skill_manager.py:\\n   35  		return entity.stats.Willpower or 0\\n   36  \\n   37: def get_stamina(entity):\\n   38  	if entity.stats:\\n   39: 		return entity.stats.Stamina or 0\\n   40  \\n   41  def get_endurance(entity):\\n\\n35 matches across 8 files\\n\\n\\nSearching 75 files for \\\"feat_perform_re\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\feat_system.py:\\n   32  		kwargs = {**feat.function_kwargs, **kwargs}\\n   33  		entity.stats.sp -= feat.stamina_cost\\n   34: 		feat_perform_results = feat.use_function(entity, **kwargs)\\n   35  \\n   36: 		results.extend(feat_perform_results)\\n   37  		results.append({'performed': spell.name})\\n   38  	return results\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\input_process_system.py:\\n  157  				player_turn_results.extend(missile_attack_results)	\\n  158  			elif targets.current_targeting_missile:\\n  159: 				feat_perform_results = player.fighter.fire_weapon(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\n  160  				player_turn_results.extend(missile_attack_results)	\\n  161  			action_free = False\\n\\n3 matches across 2 files\\n\\n\\nSearching 75 files for \\\"perform(\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\feat_system.py:\\n   16  	return feat\\n   17  \\n   18: def perform(entity, feat, **kwargs):\\n   19  	results = []\\n   20  	target_x = kwargs.get('target_x')\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\input_process_system.py:\\n  126  		feat = player.performer.feat_list[feat_index]\\n  127  		print(feat_index)\\n  128: 		player_turn_results.extend(perform(player, feat, entities=entities, fov_map=fov_map))\\n  129  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\n  130  		for result in player_turn_results:\\n  ...\\n  157  				player_turn_results.extend(missile_attack_results)	\\n  158  			elif targets.current_targeting_missile:\\n  159: 				feat_perform_results = perform(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\n  160  				player_turn_results.extend(missile_attack_results)	\\n  161  			action_free = False\\n\\n3 matches across 2 files\\n\\n\\nSearching 75 files for \\\"current_targeting_fe\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\results_process_system.py:\\n   51  			previous_game_state = GameStates.PLAYERS_TURN\\n   52  			game_state = GameStates.TARGETING\\n   53: 			targets.current_targeting_feat = feat_targeting\\n   54: 			message_log.add_message(targets.current_targeting_feat.targeting_message)\\n   55  		if missile_targeting:\\n   56  			previous_game_state = GameStates.PLAYERS_TURN\\n\\nC:\\\\dev\\\\p3roguelike\\\\targeting.py:\\n    4  		self.current_targeting_spell = None\\n    5  		self.current_targeting_missile = False\\n    6: 		self.current_targeting_feat = None\\n    7  \\n    8  	def __str__(self):\\n\\n3 matches across 2 files\\n\",\n  580  			\"settings\":\n  581  			{\n\nC:\\dev\\p3roguelike\\systems\\feat_system.py:\n   39  \n   40  		results.extend(feat_perform_results)\n   41: 		results.append({'performed': feat.name})\n   42  	return results\n   43  \n\nC:\\dev\\p3roguelike\\systems\\input_process_system.py:\n  128  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\n  129  		for result in player_turn_results:\n  130: 			if result.get('performed'):\n  131  				print(\"used action via feat\")\n  132  				action_free = False		\n\n3 matches across 3 files\n\n\nSearching 75 files for \"perform(\"\n\nC:\\dev\\p3roguelike\\p3RL.sublime-workspace:\n  561  		},\n  562  		{\n  563: 			\"contents\": \"Searching 75 files for \\\"performed\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\p3RL.sublime-workspace:\\n  577  		},\\n  578  		{\\n  579: 			\\\"contents\\\": \\\"Searching 75 files for \\\\\\\"spells_menu\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\menus.py:\\\\n   19  	menu(con, header, options, inventory_width, screen_width, screen_height)\\\\n   20  \\\\n   21: def spells_menu(con, header, spells_width, screen_width, screen_height, player):\\\\n   22  	if len(player.caster.spells) == 0:\\\\n   23  		header = \\\\\\\"You don't know any spells yet.\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\render_functions.py:\\\\n    2  from enum import Enum\\\\n    3  from game_states import GameStates\\\\n    4: from menus import inventory_menu, level_up_menu, character_screen, spells_menu, potion_menu, equipment_menu\\\\n    5  from systems.name_system import get_display_name\\\\n    6  from loader_functions.tile_codes import *\\\\n    .\\\\n   97  \\\\n   98  	elif game_state == GameStates.SPELLS_SCREEN:\\\\n   99: 		spells_menu(con, \\\\\\\"Choose a spell to cast...\\\\\\\", 50, screen_width, screen_height, player)\\\\n  100  \\\\n  101  	elif game_state == GameStates.POTION_SCREEN:\\\\n\\\\n3 matches across 2 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"spell_targeting\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\p3RL.sublime-workspace:\\\\n   98  			[\\\\n   99  				\\\\\\\"spell_\\\\\\\",\\\\n  100: 				\\\\\\\"spell_targeting_result\\\\\\\"\\\\n  101  			],\\\\n  102  			[\\\\n  ...\\\\n 1056  			\\\\\\\"spell_t\\\\\\\",\\\\n 1057  			\\\\\\\"targeting_item\\\\\\\",\\\\n 1058: 			\\\\\\\"spell_targeting\\\\\\\",\\\\n 1059  			\\\\\\\"action_free = False\\\\\\\",\\\\n 1060  			\\\\\\\"game_state = GameStates.PLAYERS_TURN\\\\\\\",\\\\n ....\\\\n 1105  			\\\\\\\"missile_targ\\\\\\\",\\\\n 1106  			\\\\\\\"print(\\\\\\\",\\\\n 1107: 			\\\\\\\"spell_targeting\\\\\\\",\\\\n 1108  			\\\\\\\"game_state = GameStates.TARGETING\\\\\\\",\\\\n 1109  			\\\\\\\"action_free\\\\\\\",\\\\n 1110  			\\\\\\\"targeting_item\\\\\\\",\\\\n 1111: 			\\\\\\\"spell_targeting\\\\\\\",\\\\n 1112  			\\\\\\\":\\\\\\\\n\\\\\\\",\\\\n 1113  			\\\\\\\"handle_de\\\\\\\",\\\\n ....\\\\n 1122  			\\\\\\\"con\\\\\\\",\\\\n 1123  			\\\\\\\"targeting\\\\\\\",\\\\n 1124: 			\\\\\\\"spell_targeting\\\\\\\",\\\\n 1125  			\\\\\\\"spell_tar\\\\\\\",\\\\n 1126  			\\\\\\\"spell_targ\\\\\\\",\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\results_process_system.py:\\\\n   14  		item_dropped = player_turn_result.get('item_dropped')\\\\n   15  		targeting = player_turn_result.get('targeting')\\\\n   16: 		spell_targeting_result = player_turn_result.get('spell_targeting')\\\\n   17  		targeting_cancelled = player_turn_result.get('targeting_cancelled')\\\\n   18  		equip = player_turn_result.get('equip')\\\\n   ..\\\\n   40  			targets.current_targeting_consumable = targeting\\\\n   41  			message_log.add_message(targets.current_targeting_consumable.consumable.targeting_message)\\\\n   42: 		if spell_targeting_result:\\\\n   43  			print(\\\\\\\"result process system picked up the spell targeting result\\\\\\\")\\\\n   44  			previous_game_state = GameStates.PLAYERS_TURN\\\\n   45  			game_state = GameStates.TARGETING\\\\n   46: 			targets.current_targeting_spell = spell_targeting_result\\\\n   47  			message_log.add_message(targets.current_targeting_spell.targeting_message)\\\\n   48  		if missile_targeting:\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\spell_system.py:\\\\n   24  \\\\n   25  	if spell.targeting and not (kwargs.get('target_x') or kwargs.get('target_y')):\\\\n   26: 		print(\\\\\\\"spell system is returning spell_targeting\\\\\\\")\\\\n   27: 		results.append({'spell_targeting': spell})\\\\n   28  	else:\\\\n   29  		kwargs = {**spell.function_kwargs, **kwargs}\\\\n\\\\n11 matches across 3 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"stamina\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\components\\\\\\\\stats.py:\\\\n    1  class Stats:\\\\n    2: 	def __init__(self, Strength=10, Precision=10, Agility=10, Intellect=10, Willpower=10, Stamina=10, Endurance=10):\\\\n    3  		self.Strength = Strength\\\\n    4  		self.Precision = Precision\\\\n    .\\\\n    6  		self.Intellect = Intellect\\\\n    7  		self.Willpower = Willpower\\\\n    8: 		self.Stamina = Stamina\\\\n    9  		self.Endurance = Endurance\\\\n   10: 		self.base_max_hp = self.Stamina + self.Endurance\\\\n   11  		self.hp = self.base_max_hp\\\\n   12  		self.evade = int((self.Agility + self.Precision) / 4)\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\feats.py:\\\\n    1  class Feat:\\\\n    2: 	def __init__(self, name, display_name, parent_skill, minimum_rank, stamina_cost, use_function, targeting, targeting_message, feat_range, **kwargs):\\\\n    3  		self.name = name\\\\n    4  		self.display_name = display_name\\\\n    5  		self.parent_skill = parent_skill\\\\n    6  		self.minimum_rank = minimum_rank\\\\n    7: 		self.stamina_cost = stamina_cost\\\\n    8  		self.use_function = use_function\\\\n    9  		self.targeting = targeting\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\loader_functions\\\\\\\\initialize_new_game.py:\\\\n   72  	defender_component = Defender()\\\\n   73  	performer_component = Performer()\\\\n   74: 	stats_component = Stats(Strength=14, Precision=14, Agility=14, Intellect=14, Willpower=14, Stamina=14, Endurance=14)\\\\n   75  	skills_component = Skills()\\\\n   76  	skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\mocks.py:\\\\n   20  	test_identified = Identified()\\\\n   21  	test_inventory = Inventory(10)\\\\n   22: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   23  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", inventory=test_inventory, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, identified=test_identified)\\\\n   24  	return test_entity\\\\n   ..\\\\n   29  	test_skills_component = Skills()\\\\n   30  	test_equipment_component = Equipment()\\\\n   31: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   32  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n   33  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n   ..\\\\n   44  	test_fighter = Fighter()\\\\n   45  	test_name = Name(\\\\\\\"Mock\\\\\\\")\\\\n   46: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   47  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter, name=test_name)	\\\\n   48  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n   ..\\\\n   57  	test_sword = EquippableFactory.make_longsword()\\\\n   58  	test_equipment_component.main_hand = test_sword	\\\\n   59: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   60  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n   61  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\n   ..\\\\n   72  	test_equipment_component.main_hand = test_sword\\\\n   73  	test_equipment_component.off_hand = test_shield	\\\\n   74: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   75  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\n   76  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n   ..\\\\n   87  	test_equipment_component.main_hand = test_sword\\\\n   88  	test_equipment_component.off_hand = test_shield\\\\n   89: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   90  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n   91  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n   ..\\\\n  101  	test_sword = EquippableFactory.make_longsword()\\\\n  102  	test_equipment_component.main_hand = test_sword\\\\n  103: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  104  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n  105  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\n  ...\\\\n  117  	test_equipment_component.main_hand = test_sword\\\\n  118  	test_equipment_component.off_hand = test_shield	\\\\n  119: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  120  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\n  121  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\n  ...\\\\n  130  	test_bow = EquippableFactory.make_shortbow()\\\\n  131  	test_equipment_component.main_hand = test_bow\\\\n  132: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  133  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n  134  	return test_entity\\\\n  ...\\\\n  144  	test_equipment_component.main_hand = test_bow\\\\n  145  	test_equipment_component.ammunition = test_arrows\\\\n  146: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  147  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n  148  	return test_entity\\\\n  ...\\\\n  157  	test_equipment_component.main_hand = test_sword\\\\n  158  	test_equipment_component.off_hand = test_shield	\\\\n  159: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=14, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  160  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n  161  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n  ...\\\\n  167  	test_skills_component = Skills()\\\\n  168  	test_equipment_component = Equipment()\\\\n  169: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=13	, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  170  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component)\\\\n  171  	test_skills_component.set_skill_rank(SkillNames.UNARMED, 1)\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\monsters.py:\\\\n   19  def makeOrc(x, y):\\\\n   20  	fighter_component = Fighter(xp=35)\\\\n   21: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   22  	ai_component = BasicMonster()\\\\n   23  	equipment_component = Equipment()\\\\n   ..\\\\n   40  def makeTroll(x, y):\\\\n   41  	fighter_component = Fighter(xp=100)\\\\n   42: 	stats_component = Stats(Strength=12, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   43  	ai_component = BasicMonster()\\\\n   44  	equipment_component = Equipment()\\\\n   ..\\\\n   58  def makeKobold(x, y):\\\\n   59  	fighter_component = Fighter(xp=30)\\\\n   60: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   61  	ai_component = BasicMonster()\\\\n   62  	equipment_component = Equipment()\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\rltests.py:\\\\n  115  		test_caster = Caster(spells=[], max_mana=50)\\\\n  116  		test_fighter = Fighter(xp=100)\\\\n  117: 		test_stats = Stats(Strength=1, Precision=1, Agility=1, Intellect=1, Willpower=1, Stamina=1, Endurance=1)\\\\n  118  		test_skills = Skills()\\\\n  119  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", caster=test_caster, fighter=test_fighter, skills=test_skills, stats=test_stats)\\\\n  ...\\\\n  180  class StatsTests(unittest.TestCase):\\\\n  181  	def test_can_create_entity_with_stats(self):\\\\n  182: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  183  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", stats=test_stats_component)\\\\n  184  		self.assertEqual(test_entity.stats, test_stats_component)\\\\n  185  \\\\n  186  	def test_can_calculate_hp(self):\\\\n  187: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  188  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", stats=test_stats_component)\\\\n  189  		self.assertEqual(test_entity.stats.max_hp, 19)\\\\n  ...\\\\n  219  \\\\n  220  	def test_can_get_damage_string(self):\\\\n  221: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  222  		test_fighter_component = Fighter(xp=10)\\\\n  223  		test_equipment = Equipment()\\\\n  ...\\\\n  645  	def test_damage_over_time_effects_work(self):\\\\n  646  		fighter_component = Fighter(xp=100)\\\\n  647: 		stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  648  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, stats=stats_component, fighter=fighter_component)\\\\n  649  		test_effect = Effect(name=EffectNames.POISON, description=\\\\\\\"Poisoned\\\\\\\", turns_left=5, damage_per_turn=3)\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\feat_system.py:\\\\n   17  	results = []\\\\n   18  \\\\n   19: 	if feat.stamina_cost > entity.stats.stamina:\\\\n   20: 		results.append({'message': Message(\\\\\\\"You don't have enough stamina to perform that feat.\\\\\\\")})\\\\n   21  		return results\\\\n   22  \\\\n   ..\\\\n   26  	else:\\\\n   27  		kwargs = {**feat.function_kwargs, **kwargs}\\\\n   28: 		entity.stats.stamina -= feat.stamina_cost\\\\n   29  		feat_perform_results = feat.use_function(entity, **kwargs)\\\\n   30  \\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\skill_manager.py:\\\\n   35  		return entity.stats.Willpower or 0\\\\n   36  \\\\n   37: def get_stamina(entity):\\\\n   38  	if entity.stats:\\\\n   39: 		return entity.stats.Stamina or 0\\\\n   40  \\\\n   41  def get_endurance(entity):\\\\n\\\\n35 matches across 8 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"feat_perform_re\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\feat_system.py:\\\\n   32  		kwargs = {**feat.function_kwargs, **kwargs}\\\\n   33  		entity.stats.sp -= feat.stamina_cost\\\\n   34: 		feat_perform_results = feat.use_function(entity, **kwargs)\\\\n   35  \\\\n   36: 		results.extend(feat_perform_results)\\\\n   37  		results.append({'performed': spell.name})\\\\n   38  	return results\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\input_process_system.py:\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\n  158  			elif targets.current_targeting_missile:\\\\n  159: 				feat_perform_results = player.fighter.fire_weapon(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\n  161  			action_free = False\\\\n\\\\n3 matches across 2 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"perform(\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\feat_system.py:\\\\n   16  	return feat\\\\n   17  \\\\n   18: def perform(entity, feat, **kwargs):\\\\n   19  	results = []\\\\n   20  	target_x = kwargs.get('target_x')\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\input_process_system.py:\\\\n  126  		feat = player.performer.feat_list[feat_index]\\\\n  127  		print(feat_index)\\\\n  128: 		player_turn_results.extend(perform(player, feat, entities=entities, fov_map=fov_map))\\\\n  129  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\\\n  130  		for result in player_turn_results:\\\\n  ...\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\n  158  			elif targets.current_targeting_missile:\\\\n  159: 				feat_perform_results = perform(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\n  161  			action_free = False\\\\n\\\\n3 matches across 2 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"current_targeting_fe\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\results_process_system.py:\\\\n   51  			previous_game_state = GameStates.PLAYERS_TURN\\\\n   52  			game_state = GameStates.TARGETING\\\\n   53: 			targets.current_targeting_feat = feat_targeting\\\\n   54: 			message_log.add_message(targets.current_targeting_feat.targeting_message)\\\\n   55  		if missile_targeting:\\\\n   56  			previous_game_state = GameStates.PLAYERS_TURN\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\targeting.py:\\\\n    4  		self.current_targeting_spell = None\\\\n    5  		self.current_targeting_missile = False\\\\n    6: 		self.current_targeting_feat = None\\\\n    7  \\\\n    8  	def __str__(self):\\\\n\\\\n3 matches across 2 files\\\\n\\\",\\n  580  			\\\"settings\\\":\\n  581  			{\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\feat_system.py:\\n   39  \\n   40  		results.extend(feat_perform_results)\\n   41: 		results.append({'performed': feat.name})\\n   42  	return results\\n   43  \\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\input_process_system.py:\\n  128  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\n  129  		for result in player_turn_results:\\n  130: 			if result.get('performed'):\\n  131  				print(\\\"used action via feat\\\")\\n  132  				action_free = False		\\n\\n3 matches across 3 files\\n\",\n  564  			\"settings\":\n  565  			{\n  ...\n 1031  			\"performed\",\n 1032  			\"current_targeting_fe\",\n 1033: 			\"perform(\",\n 1034  			\"feat_perform_re\",\n 1035  			\"stamina\",\n\nC:\\dev\\p3roguelike\\systems\\input_process_system.py:\n  125  	if feat_index is not None and feat_index < len(player.performer.feat_list):\n  126  		feat = player.performer.feat_list[feat_index]\n  127: 		player_turn_results.extend(perform(player, feat, entities=entities, fov_map=fov_map))\n  128  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\n  129  		for result in player_turn_results:\n  ...\n  157  				player_turn_results.extend(missile_attack_results)	\n  158  			elif targets.current_targeting_feat:\n  159: 				feat_perform_results = perform(player, targets.current_targeting_feat, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\n  160  				player_turn_results.extend(feat_perform_results)\n  161  				for result in player_turn_results:\n\n7 matches across 2 files\n\n\nSearching 75 files for \"used action via\"\n\nC:\\dev\\p3roguelike\\p3RL.sublime-workspace:\n  561  		},\n  562  		{\n  563: 			\"contents\": \"Searching 75 files for \\\"performed\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\p3RL.sublime-workspace:\\n  577  		},\\n  578  		{\\n  579: 			\\\"contents\\\": \\\"Searching 75 files for \\\\\\\"spells_menu\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\menus.py:\\\\n   19  	menu(con, header, options, inventory_width, screen_width, screen_height)\\\\n   20  \\\\n   21: def spells_menu(con, header, spells_width, screen_width, screen_height, player):\\\\n   22  	if len(player.caster.spells) == 0:\\\\n   23  		header = \\\\\\\"You don't know any spells yet.\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\render_functions.py:\\\\n    2  from enum import Enum\\\\n    3  from game_states import GameStates\\\\n    4: from menus import inventory_menu, level_up_menu, character_screen, spells_menu, potion_menu, equipment_menu\\\\n    5  from systems.name_system import get_display_name\\\\n    6  from loader_functions.tile_codes import *\\\\n    .\\\\n   97  \\\\n   98  	elif game_state == GameStates.SPELLS_SCREEN:\\\\n   99: 		spells_menu(con, \\\\\\\"Choose a spell to cast...\\\\\\\", 50, screen_width, screen_height, player)\\\\n  100  \\\\n  101  	elif game_state == GameStates.POTION_SCREEN:\\\\n\\\\n3 matches across 2 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"spell_targeting\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\p3RL.sublime-workspace:\\\\n   98  			[\\\\n   99  				\\\\\\\"spell_\\\\\\\",\\\\n  100: 				\\\\\\\"spell_targeting_result\\\\\\\"\\\\n  101  			],\\\\n  102  			[\\\\n  ...\\\\n 1056  			\\\\\\\"spell_t\\\\\\\",\\\\n 1057  			\\\\\\\"targeting_item\\\\\\\",\\\\n 1058: 			\\\\\\\"spell_targeting\\\\\\\",\\\\n 1059  			\\\\\\\"action_free = False\\\\\\\",\\\\n 1060  			\\\\\\\"game_state = GameStates.PLAYERS_TURN\\\\\\\",\\\\n ....\\\\n 1105  			\\\\\\\"missile_targ\\\\\\\",\\\\n 1106  			\\\\\\\"print(\\\\\\\",\\\\n 1107: 			\\\\\\\"spell_targeting\\\\\\\",\\\\n 1108  			\\\\\\\"game_state = GameStates.TARGETING\\\\\\\",\\\\n 1109  			\\\\\\\"action_free\\\\\\\",\\\\n 1110  			\\\\\\\"targeting_item\\\\\\\",\\\\n 1111: 			\\\\\\\"spell_targeting\\\\\\\",\\\\n 1112  			\\\\\\\":\\\\\\\\n\\\\\\\",\\\\n 1113  			\\\\\\\"handle_de\\\\\\\",\\\\n ....\\\\n 1122  			\\\\\\\"con\\\\\\\",\\\\n 1123  			\\\\\\\"targeting\\\\\\\",\\\\n 1124: 			\\\\\\\"spell_targeting\\\\\\\",\\\\n 1125  			\\\\\\\"spell_tar\\\\\\\",\\\\n 1126  			\\\\\\\"spell_targ\\\\\\\",\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\results_process_system.py:\\\\n   14  		item_dropped = player_turn_result.get('item_dropped')\\\\n   15  		targeting = player_turn_result.get('targeting')\\\\n   16: 		spell_targeting_result = player_turn_result.get('spell_targeting')\\\\n   17  		targeting_cancelled = player_turn_result.get('targeting_cancelled')\\\\n   18  		equip = player_turn_result.get('equip')\\\\n   ..\\\\n   40  			targets.current_targeting_consumable = targeting\\\\n   41  			message_log.add_message(targets.current_targeting_consumable.consumable.targeting_message)\\\\n   42: 		if spell_targeting_result:\\\\n   43  			print(\\\\\\\"result process system picked up the spell targeting result\\\\\\\")\\\\n   44  			previous_game_state = GameStates.PLAYERS_TURN\\\\n   45  			game_state = GameStates.TARGETING\\\\n   46: 			targets.current_targeting_spell = spell_targeting_result\\\\n   47  			message_log.add_message(targets.current_targeting_spell.targeting_message)\\\\n   48  		if missile_targeting:\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\spell_system.py:\\\\n   24  \\\\n   25  	if spell.targeting and not (kwargs.get('target_x') or kwargs.get('target_y')):\\\\n   26: 		print(\\\\\\\"spell system is returning spell_targeting\\\\\\\")\\\\n   27: 		results.append({'spell_targeting': spell})\\\\n   28  	else:\\\\n   29  		kwargs = {**spell.function_kwargs, **kwargs}\\\\n\\\\n11 matches across 3 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"stamina\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\components\\\\\\\\stats.py:\\\\n    1  class Stats:\\\\n    2: 	def __init__(self, Strength=10, Precision=10, Agility=10, Intellect=10, Willpower=10, Stamina=10, Endurance=10):\\\\n    3  		self.Strength = Strength\\\\n    4  		self.Precision = Precision\\\\n    .\\\\n    6  		self.Intellect = Intellect\\\\n    7  		self.Willpower = Willpower\\\\n    8: 		self.Stamina = Stamina\\\\n    9  		self.Endurance = Endurance\\\\n   10: 		self.base_max_hp = self.Stamina + self.Endurance\\\\n   11  		self.hp = self.base_max_hp\\\\n   12  		self.evade = int((self.Agility + self.Precision) / 4)\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\feats.py:\\\\n    1  class Feat:\\\\n    2: 	def __init__(self, name, display_name, parent_skill, minimum_rank, stamina_cost, use_function, targeting, targeting_message, feat_range, **kwargs):\\\\n    3  		self.name = name\\\\n    4  		self.display_name = display_name\\\\n    5  		self.parent_skill = parent_skill\\\\n    6  		self.minimum_rank = minimum_rank\\\\n    7: 		self.stamina_cost = stamina_cost\\\\n    8  		self.use_function = use_function\\\\n    9  		self.targeting = targeting\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\loader_functions\\\\\\\\initialize_new_game.py:\\\\n   72  	defender_component = Defender()\\\\n   73  	performer_component = Performer()\\\\n   74: 	stats_component = Stats(Strength=14, Precision=14, Agility=14, Intellect=14, Willpower=14, Stamina=14, Endurance=14)\\\\n   75  	skills_component = Skills()\\\\n   76  	skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\mocks.py:\\\\n   20  	test_identified = Identified()\\\\n   21  	test_inventory = Inventory(10)\\\\n   22: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   23  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", inventory=test_inventory, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, identified=test_identified)\\\\n   24  	return test_entity\\\\n   ..\\\\n   29  	test_skills_component = Skills()\\\\n   30  	test_equipment_component = Equipment()\\\\n   31: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   32  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n   33  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n   ..\\\\n   44  	test_fighter = Fighter()\\\\n   45  	test_name = Name(\\\\\\\"Mock\\\\\\\")\\\\n   46: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   47  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter, name=test_name)	\\\\n   48  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n   ..\\\\n   57  	test_sword = EquippableFactory.make_longsword()\\\\n   58  	test_equipment_component.main_hand = test_sword	\\\\n   59: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   60  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n   61  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\n   ..\\\\n   72  	test_equipment_component.main_hand = test_sword\\\\n   73  	test_equipment_component.off_hand = test_shield	\\\\n   74: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   75  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\n   76  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n   ..\\\\n   87  	test_equipment_component.main_hand = test_sword\\\\n   88  	test_equipment_component.off_hand = test_shield\\\\n   89: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   90  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n   91  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n   ..\\\\n  101  	test_sword = EquippableFactory.make_longsword()\\\\n  102  	test_equipment_component.main_hand = test_sword\\\\n  103: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  104  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n  105  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\n  ...\\\\n  117  	test_equipment_component.main_hand = test_sword\\\\n  118  	test_equipment_component.off_hand = test_shield	\\\\n  119: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  120  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\n  121  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\n  ...\\\\n  130  	test_bow = EquippableFactory.make_shortbow()\\\\n  131  	test_equipment_component.main_hand = test_bow\\\\n  132: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  133  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n  134  	return test_entity\\\\n  ...\\\\n  144  	test_equipment_component.main_hand = test_bow\\\\n  145  	test_equipment_component.ammunition = test_arrows\\\\n  146: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  147  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n  148  	return test_entity\\\\n  ...\\\\n  157  	test_equipment_component.main_hand = test_sword\\\\n  158  	test_equipment_component.off_hand = test_shield	\\\\n  159: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=14, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  160  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n  161  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n  ...\\\\n  167  	test_skills_component = Skills()\\\\n  168  	test_equipment_component = Equipment()\\\\n  169: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=13	, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  170  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component)\\\\n  171  	test_skills_component.set_skill_rank(SkillNames.UNARMED, 1)\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\monsters.py:\\\\n   19  def makeOrc(x, y):\\\\n   20  	fighter_component = Fighter(xp=35)\\\\n   21: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   22  	ai_component = BasicMonster()\\\\n   23  	equipment_component = Equipment()\\\\n   ..\\\\n   40  def makeTroll(x, y):\\\\n   41  	fighter_component = Fighter(xp=100)\\\\n   42: 	stats_component = Stats(Strength=12, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   43  	ai_component = BasicMonster()\\\\n   44  	equipment_component = Equipment()\\\\n   ..\\\\n   58  def makeKobold(x, y):\\\\n   59  	fighter_component = Fighter(xp=30)\\\\n   60: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   61  	ai_component = BasicMonster()\\\\n   62  	equipment_component = Equipment()\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\rltests.py:\\\\n  115  		test_caster = Caster(spells=[], max_mana=50)\\\\n  116  		test_fighter = Fighter(xp=100)\\\\n  117: 		test_stats = Stats(Strength=1, Precision=1, Agility=1, Intellect=1, Willpower=1, Stamina=1, Endurance=1)\\\\n  118  		test_skills = Skills()\\\\n  119  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", caster=test_caster, fighter=test_fighter, skills=test_skills, stats=test_stats)\\\\n  ...\\\\n  180  class StatsTests(unittest.TestCase):\\\\n  181  	def test_can_create_entity_with_stats(self):\\\\n  182: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  183  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", stats=test_stats_component)\\\\n  184  		self.assertEqual(test_entity.stats, test_stats_component)\\\\n  185  \\\\n  186  	def test_can_calculate_hp(self):\\\\n  187: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  188  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", stats=test_stats_component)\\\\n  189  		self.assertEqual(test_entity.stats.max_hp, 19)\\\\n  ...\\\\n  219  \\\\n  220  	def test_can_get_damage_string(self):\\\\n  221: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  222  		test_fighter_component = Fighter(xp=10)\\\\n  223  		test_equipment = Equipment()\\\\n  ...\\\\n  645  	def test_damage_over_time_effects_work(self):\\\\n  646  		fighter_component = Fighter(xp=100)\\\\n  647: 		stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  648  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, stats=stats_component, fighter=fighter_component)\\\\n  649  		test_effect = Effect(name=EffectNames.POISON, description=\\\\\\\"Poisoned\\\\\\\", turns_left=5, damage_per_turn=3)\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\feat_system.py:\\\\n   17  	results = []\\\\n   18  \\\\n   19: 	if feat.stamina_cost > entity.stats.stamina:\\\\n   20: 		results.append({'message': Message(\\\\\\\"You don't have enough stamina to perform that feat.\\\\\\\")})\\\\n   21  		return results\\\\n   22  \\\\n   ..\\\\n   26  	else:\\\\n   27  		kwargs = {**feat.function_kwargs, **kwargs}\\\\n   28: 		entity.stats.stamina -= feat.stamina_cost\\\\n   29  		feat_perform_results = feat.use_function(entity, **kwargs)\\\\n   30  \\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\skill_manager.py:\\\\n   35  		return entity.stats.Willpower or 0\\\\n   36  \\\\n   37: def get_stamina(entity):\\\\n   38  	if entity.stats:\\\\n   39: 		return entity.stats.Stamina or 0\\\\n   40  \\\\n   41  def get_endurance(entity):\\\\n\\\\n35 matches across 8 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"feat_perform_re\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\feat_system.py:\\\\n   32  		kwargs = {**feat.function_kwargs, **kwargs}\\\\n   33  		entity.stats.sp -= feat.stamina_cost\\\\n   34: 		feat_perform_results = feat.use_function(entity, **kwargs)\\\\n   35  \\\\n   36: 		results.extend(feat_perform_results)\\\\n   37  		results.append({'performed': spell.name})\\\\n   38  	return results\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\input_process_system.py:\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\n  158  			elif targets.current_targeting_missile:\\\\n  159: 				feat_perform_results = player.fighter.fire_weapon(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\n  161  			action_free = False\\\\n\\\\n3 matches across 2 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"perform(\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\feat_system.py:\\\\n   16  	return feat\\\\n   17  \\\\n   18: def perform(entity, feat, **kwargs):\\\\n   19  	results = []\\\\n   20  	target_x = kwargs.get('target_x')\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\input_process_system.py:\\\\n  126  		feat = player.performer.feat_list[feat_index]\\\\n  127  		print(feat_index)\\\\n  128: 		player_turn_results.extend(perform(player, feat, entities=entities, fov_map=fov_map))\\\\n  129  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\\\n  130  		for result in player_turn_results:\\\\n  ...\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\n  158  			elif targets.current_targeting_missile:\\\\n  159: 				feat_perform_results = perform(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\n  161  			action_free = False\\\\n\\\\n3 matches across 2 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"current_targeting_fe\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\results_process_system.py:\\\\n   51  			previous_game_state = GameStates.PLAYERS_TURN\\\\n   52  			game_state = GameStates.TARGETING\\\\n   53: 			targets.current_targeting_feat = feat_targeting\\\\n   54: 			message_log.add_message(targets.current_targeting_feat.targeting_message)\\\\n   55  		if missile_targeting:\\\\n   56  			previous_game_state = GameStates.PLAYERS_TURN\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\targeting.py:\\\\n    4  		self.current_targeting_spell = None\\\\n    5  		self.current_targeting_missile = False\\\\n    6: 		self.current_targeting_feat = None\\\\n    7  \\\\n    8  	def __str__(self):\\\\n\\\\n3 matches across 2 files\\\\n\\\",\\n  580  			\\\"settings\\\":\\n  581  			{\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\feat_system.py:\\n   39  \\n   40  		results.extend(feat_perform_results)\\n   41: 		results.append({'performed': feat.name})\\n   42  	return results\\n   43  \\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\input_process_system.py:\\n  128  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\n  129  		for result in player_turn_results:\\n  130: 			if result.get('performed'):\\n  131  				print(\\\"used action via feat\\\")\\n  132  				action_free = False		\\n\\n3 matches across 3 files\\n\\n\\nSearching 75 files for \\\"perform(\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\p3RL.sublime-workspace:\\n  561  		},\\n  562  		{\\n  563: 			\\\"contents\\\": \\\"Searching 75 files for \\\\\\\"performed\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\p3RL.sublime-workspace:\\\\n  577  		},\\\\n  578  		{\\\\n  579: 			\\\\\\\"contents\\\\\\\": \\\\\\\"Searching 75 files for \\\\\\\\\\\\\\\"spells_menu\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\menus.py:\\\\\\\\n   19  	menu(con, header, options, inventory_width, screen_width, screen_height)\\\\\\\\n   20  \\\\\\\\n   21: def spells_menu(con, header, spells_width, screen_width, screen_height, player):\\\\\\\\n   22  	if len(player.caster.spells) == 0:\\\\\\\\n   23  		header = \\\\\\\\\\\\\\\"You don't know any spells yet.\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\render_functions.py:\\\\\\\\n    2  from enum import Enum\\\\\\\\n    3  from game_states import GameStates\\\\\\\\n    4: from menus import inventory_menu, level_up_menu, character_screen, spells_menu, potion_menu, equipment_menu\\\\\\\\n    5  from systems.name_system import get_display_name\\\\\\\\n    6  from loader_functions.tile_codes import *\\\\\\\\n    .\\\\\\\\n   97  \\\\\\\\n   98  	elif game_state == GameStates.SPELLS_SCREEN:\\\\\\\\n   99: 		spells_menu(con, \\\\\\\\\\\\\\\"Choose a spell to cast...\\\\\\\\\\\\\\\", 50, screen_width, screen_height, player)\\\\\\\\n  100  \\\\\\\\n  101  	elif game_state == GameStates.POTION_SCREEN:\\\\\\\\n\\\\\\\\n3 matches across 2 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\p3RL.sublime-workspace:\\\\\\\\n   98  			[\\\\\\\\n   99  				\\\\\\\\\\\\\\\"spell_\\\\\\\\\\\\\\\",\\\\\\\\n  100: 				\\\\\\\\\\\\\\\"spell_targeting_result\\\\\\\\\\\\\\\"\\\\\\\\n  101  			],\\\\\\\\n  102  			[\\\\\\\\n  ...\\\\\\\\n 1056  			\\\\\\\\\\\\\\\"spell_t\\\\\\\\\\\\\\\",\\\\\\\\n 1057  			\\\\\\\\\\\\\\\"targeting_item\\\\\\\\\\\\\\\",\\\\\\\\n 1058: 			\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1059  			\\\\\\\\\\\\\\\"action_free = False\\\\\\\\\\\\\\\",\\\\\\\\n 1060  			\\\\\\\\\\\\\\\"game_state = GameStates.PLAYERS_TURN\\\\\\\\\\\\\\\",\\\\\\\\n ....\\\\\\\\n 1105  			\\\\\\\\\\\\\\\"missile_targ\\\\\\\\\\\\\\\",\\\\\\\\n 1106  			\\\\\\\\\\\\\\\"print(\\\\\\\\\\\\\\\",\\\\\\\\n 1107: 			\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1108  			\\\\\\\\\\\\\\\"game_state = GameStates.TARGETING\\\\\\\\\\\\\\\",\\\\\\\\n 1109  			\\\\\\\\\\\\\\\"action_free\\\\\\\\\\\\\\\",\\\\\\\\n 1110  			\\\\\\\\\\\\\\\"targeting_item\\\\\\\\\\\\\\\",\\\\\\\\n 1111: 			\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1112  			\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\",\\\\\\\\n 1113  			\\\\\\\\\\\\\\\"handle_de\\\\\\\\\\\\\\\",\\\\\\\\n ....\\\\\\\\n 1122  			\\\\\\\\\\\\\\\"con\\\\\\\\\\\\\\\",\\\\\\\\n 1123  			\\\\\\\\\\\\\\\"targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1124: 			\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1125  			\\\\\\\\\\\\\\\"spell_tar\\\\\\\\\\\\\\\",\\\\\\\\n 1126  			\\\\\\\\\\\\\\\"spell_targ\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\results_process_system.py:\\\\\\\\n   14  		item_dropped = player_turn_result.get('item_dropped')\\\\\\\\n   15  		targeting = player_turn_result.get('targeting')\\\\\\\\n   16: 		spell_targeting_result = player_turn_result.get('spell_targeting')\\\\\\\\n   17  		targeting_cancelled = player_turn_result.get('targeting_cancelled')\\\\\\\\n   18  		equip = player_turn_result.get('equip')\\\\\\\\n   ..\\\\\\\\n   40  			targets.current_targeting_consumable = targeting\\\\\\\\n   41  			message_log.add_message(targets.current_targeting_consumable.consumable.targeting_message)\\\\\\\\n   42: 		if spell_targeting_result:\\\\\\\\n   43  			print(\\\\\\\\\\\\\\\"result process system picked up the spell targeting result\\\\\\\\\\\\\\\")\\\\\\\\n   44  			previous_game_state = GameStates.PLAYERS_TURN\\\\\\\\n   45  			game_state = GameStates.TARGETING\\\\\\\\n   46: 			targets.current_targeting_spell = spell_targeting_result\\\\\\\\n   47  			message_log.add_message(targets.current_targeting_spell.targeting_message)\\\\\\\\n   48  		if missile_targeting:\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\spell_system.py:\\\\\\\\n   24  \\\\\\\\n   25  	if spell.targeting and not (kwargs.get('target_x') or kwargs.get('target_y')):\\\\\\\\n   26: 		print(\\\\\\\\\\\\\\\"spell system is returning spell_targeting\\\\\\\\\\\\\\\")\\\\\\\\n   27: 		results.append({'spell_targeting': spell})\\\\\\\\n   28  	else:\\\\\\\\n   29  		kwargs = {**spell.function_kwargs, **kwargs}\\\\\\\\n\\\\\\\\n11 matches across 3 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"stamina\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\components\\\\\\\\\\\\\\\\stats.py:\\\\\\\\n    1  class Stats:\\\\\\\\n    2: 	def __init__(self, Strength=10, Precision=10, Agility=10, Intellect=10, Willpower=10, Stamina=10, Endurance=10):\\\\\\\\n    3  		self.Strength = Strength\\\\\\\\n    4  		self.Precision = Precision\\\\\\\\n    .\\\\\\\\n    6  		self.Intellect = Intellect\\\\\\\\n    7  		self.Willpower = Willpower\\\\\\\\n    8: 		self.Stamina = Stamina\\\\\\\\n    9  		self.Endurance = Endurance\\\\\\\\n   10: 		self.base_max_hp = self.Stamina + self.Endurance\\\\\\\\n   11  		self.hp = self.base_max_hp\\\\\\\\n   12  		self.evade = int((self.Agility + self.Precision) / 4)\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\feats.py:\\\\\\\\n    1  class Feat:\\\\\\\\n    2: 	def __init__(self, name, display_name, parent_skill, minimum_rank, stamina_cost, use_function, targeting, targeting_message, feat_range, **kwargs):\\\\\\\\n    3  		self.name = name\\\\\\\\n    4  		self.display_name = display_name\\\\\\\\n    5  		self.parent_skill = parent_skill\\\\\\\\n    6  		self.minimum_rank = minimum_rank\\\\\\\\n    7: 		self.stamina_cost = stamina_cost\\\\\\\\n    8  		self.use_function = use_function\\\\\\\\n    9  		self.targeting = targeting\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\loader_functions\\\\\\\\\\\\\\\\initialize_new_game.py:\\\\\\\\n   72  	defender_component = Defender()\\\\\\\\n   73  	performer_component = Performer()\\\\\\\\n   74: 	stats_component = Stats(Strength=14, Precision=14, Agility=14, Intellect=14, Willpower=14, Stamina=14, Endurance=14)\\\\\\\\n   75  	skills_component = Skills()\\\\\\\\n   76  	skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\mocks.py:\\\\\\\\n   20  	test_identified = Identified()\\\\\\\\n   21  	test_inventory = Inventory(10)\\\\\\\\n   22: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   23  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", inventory=test_inventory, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, identified=test_identified)\\\\\\\\n   24  	return test_entity\\\\\\\\n   ..\\\\\\\\n   29  	test_skills_component = Skills()\\\\\\\\n   30  	test_equipment_component = Equipment()\\\\\\\\n   31: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   32  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n   33  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n   ..\\\\\\\\n   44  	test_fighter = Fighter()\\\\\\\\n   45  	test_name = Name(\\\\\\\\\\\\\\\"Mock\\\\\\\\\\\\\\\")\\\\\\\\n   46: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   47  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter, name=test_name)	\\\\\\\\n   48  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n   ..\\\\\\\\n   57  	test_sword = EquippableFactory.make_longsword()\\\\\\\\n   58  	test_equipment_component.main_hand = test_sword	\\\\\\\\n   59: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   60  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n   61  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\\\\\n   ..\\\\\\\\n   72  	test_equipment_component.main_hand = test_sword\\\\\\\\n   73  	test_equipment_component.off_hand = test_shield	\\\\\\\\n   74: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   75  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\\\\\n   76  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n   ..\\\\\\\\n   87  	test_equipment_component.main_hand = test_sword\\\\\\\\n   88  	test_equipment_component.off_hand = test_shield\\\\\\\\n   89: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   90  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n   91  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n   ..\\\\\\\\n  101  	test_sword = EquippableFactory.make_longsword()\\\\\\\\n  102  	test_equipment_component.main_hand = test_sword\\\\\\\\n  103: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  104  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n  105  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\\\\\n  ...\\\\\\\\n  117  	test_equipment_component.main_hand = test_sword\\\\\\\\n  118  	test_equipment_component.off_hand = test_shield	\\\\\\\\n  119: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  120  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\\\\\n  121  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\\\\\n  ...\\\\\\\\n  130  	test_bow = EquippableFactory.make_shortbow()\\\\\\\\n  131  	test_equipment_component.main_hand = test_bow\\\\\\\\n  132: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  133  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n  134  	return test_entity\\\\\\\\n  ...\\\\\\\\n  144  	test_equipment_component.main_hand = test_bow\\\\\\\\n  145  	test_equipment_component.ammunition = test_arrows\\\\\\\\n  146: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  147  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n  148  	return test_entity\\\\\\\\n  ...\\\\\\\\n  157  	test_equipment_component.main_hand = test_sword\\\\\\\\n  158  	test_equipment_component.off_hand = test_shield	\\\\\\\\n  159: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=14, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  160  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n  161  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n  ...\\\\\\\\n  167  	test_skills_component = Skills()\\\\\\\\n  168  	test_equipment_component = Equipment()\\\\\\\\n  169: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=13	, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  170  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component)\\\\\\\\n  171  	test_skills_component.set_skill_rank(SkillNames.UNARMED, 1)\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\monsters.py:\\\\\\\\n   19  def makeOrc(x, y):\\\\\\\\n   20  	fighter_component = Fighter(xp=35)\\\\\\\\n   21: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   22  	ai_component = BasicMonster()\\\\\\\\n   23  	equipment_component = Equipment()\\\\\\\\n   ..\\\\\\\\n   40  def makeTroll(x, y):\\\\\\\\n   41  	fighter_component = Fighter(xp=100)\\\\\\\\n   42: 	stats_component = Stats(Strength=12, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   43  	ai_component = BasicMonster()\\\\\\\\n   44  	equipment_component = Equipment()\\\\\\\\n   ..\\\\\\\\n   58  def makeKobold(x, y):\\\\\\\\n   59  	fighter_component = Fighter(xp=30)\\\\\\\\n   60: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   61  	ai_component = BasicMonster()\\\\\\\\n   62  	equipment_component = Equipment()\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\rltests.py:\\\\\\\\n  115  		test_caster = Caster(spells=[], max_mana=50)\\\\\\\\n  116  		test_fighter = Fighter(xp=100)\\\\\\\\n  117: 		test_stats = Stats(Strength=1, Precision=1, Agility=1, Intellect=1, Willpower=1, Stamina=1, Endurance=1)\\\\\\\\n  118  		test_skills = Skills()\\\\\\\\n  119  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", caster=test_caster, fighter=test_fighter, skills=test_skills, stats=test_stats)\\\\\\\\n  ...\\\\\\\\n  180  class StatsTests(unittest.TestCase):\\\\\\\\n  181  	def test_can_create_entity_with_stats(self):\\\\\\\\n  182: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  183  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", stats=test_stats_component)\\\\\\\\n  184  		self.assertEqual(test_entity.stats, test_stats_component)\\\\\\\\n  185  \\\\\\\\n  186  	def test_can_calculate_hp(self):\\\\\\\\n  187: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  188  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", stats=test_stats_component)\\\\\\\\n  189  		self.assertEqual(test_entity.stats.max_hp, 19)\\\\\\\\n  ...\\\\\\\\n  219  \\\\\\\\n  220  	def test_can_get_damage_string(self):\\\\\\\\n  221: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  222  		test_fighter_component = Fighter(xp=10)\\\\\\\\n  223  		test_equipment = Equipment()\\\\\\\\n  ...\\\\\\\\n  645  	def test_damage_over_time_effects_work(self):\\\\\\\\n  646  		fighter_component = Fighter(xp=100)\\\\\\\\n  647: 		stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  648  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, stats=stats_component, fighter=fighter_component)\\\\\\\\n  649  		test_effect = Effect(name=EffectNames.POISON, description=\\\\\\\\\\\\\\\"Poisoned\\\\\\\\\\\\\\\", turns_left=5, damage_per_turn=3)\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\n   17  	results = []\\\\\\\\n   18  \\\\\\\\n   19: 	if feat.stamina_cost > entity.stats.stamina:\\\\\\\\n   20: 		results.append({'message': Message(\\\\\\\\\\\\\\\"You don't have enough stamina to perform that feat.\\\\\\\\\\\\\\\")})\\\\\\\\n   21  		return results\\\\\\\\n   22  \\\\\\\\n   ..\\\\\\\\n   26  	else:\\\\\\\\n   27  		kwargs = {**feat.function_kwargs, **kwargs}\\\\\\\\n   28: 		entity.stats.stamina -= feat.stamina_cost\\\\\\\\n   29  		feat_perform_results = feat.use_function(entity, **kwargs)\\\\\\\\n   30  \\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\skill_manager.py:\\\\\\\\n   35  		return entity.stats.Willpower or 0\\\\\\\\n   36  \\\\\\\\n   37: def get_stamina(entity):\\\\\\\\n   38  	if entity.stats:\\\\\\\\n   39: 		return entity.stats.Stamina or 0\\\\\\\\n   40  \\\\\\\\n   41  def get_endurance(entity):\\\\\\\\n\\\\\\\\n35 matches across 8 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"feat_perform_re\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\n   32  		kwargs = {**feat.function_kwargs, **kwargs}\\\\\\\\n   33  		entity.stats.sp -= feat.stamina_cost\\\\\\\\n   34: 		feat_perform_results = feat.use_function(entity, **kwargs)\\\\\\\\n   35  \\\\\\\\n   36: 		results.extend(feat_perform_results)\\\\\\\\n   37  		results.append({'performed': spell.name})\\\\\\\\n   38  	return results\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\input_process_system.py:\\\\\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\\\\\n  158  			elif targets.current_targeting_missile:\\\\\\\\n  159: 				feat_perform_results = player.fighter.fire_weapon(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\\\\\n  161  			action_free = False\\\\\\\\n\\\\\\\\n3 matches across 2 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"perform(\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\n   16  	return feat\\\\\\\\n   17  \\\\\\\\n   18: def perform(entity, feat, **kwargs):\\\\\\\\n   19  	results = []\\\\\\\\n   20  	target_x = kwargs.get('target_x')\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\input_process_system.py:\\\\\\\\n  126  		feat = player.performer.feat_list[feat_index]\\\\\\\\n  127  		print(feat_index)\\\\\\\\n  128: 		player_turn_results.extend(perform(player, feat, entities=entities, fov_map=fov_map))\\\\\\\\n  129  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\\\\\\\n  130  		for result in player_turn_results:\\\\\\\\n  ...\\\\\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\\\\\n  158  			elif targets.current_targeting_missile:\\\\\\\\n  159: 				feat_perform_results = perform(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\\\\\n  161  			action_free = False\\\\\\\\n\\\\\\\\n3 matches across 2 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"current_targeting_fe\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\results_process_system.py:\\\\\\\\n   51  			previous_game_state = GameStates.PLAYERS_TURN\\\\\\\\n   52  			game_state = GameStates.TARGETING\\\\\\\\n   53: 			targets.current_targeting_feat = feat_targeting\\\\\\\\n   54: 			message_log.add_message(targets.current_targeting_feat.targeting_message)\\\\\\\\n   55  		if missile_targeting:\\\\\\\\n   56  			previous_game_state = GameStates.PLAYERS_TURN\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\targeting.py:\\\\\\\\n    4  		self.current_targeting_spell = None\\\\\\\\n    5  		self.current_targeting_missile = False\\\\\\\\n    6: 		self.current_targeting_feat = None\\\\\\\\n    7  \\\\\\\\n    8  	def __str__(self):\\\\\\\\n\\\\\\\\n3 matches across 2 files\\\\\\\\n\\\\\\\",\\\\n  580  			\\\\\\\"settings\\\\\\\":\\\\n  581  			{\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\feat_system.py:\\\\n   39  \\\\n   40  		results.extend(feat_perform_results)\\\\n   41: 		results.append({'performed': feat.name})\\\\n   42  	return results\\\\n   43  \\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\input_process_system.py:\\\\n  128  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\\\n  129  		for result in player_turn_results:\\\\n  130: 			if result.get('performed'):\\\\n  131  				print(\\\\\\\"used action via feat\\\\\\\")\\\\n  132  				action_free = False		\\\\n\\\\n3 matches across 3 files\\\\n\\\",\\n  564  			\\\"settings\\\":\\n  565  			{\\n  ...\\n 1031  			\\\"performed\\\",\\n 1032  			\\\"current_targeting_fe\\\",\\n 1033: 			\\\"perform(\\\",\\n 1034  			\\\"feat_perform_re\\\",\\n 1035  			\\\"stamina\\\",\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\input_process_system.py:\\n  125  	if feat_index is not None and feat_index < len(player.performer.feat_list):\\n  126  		feat = player.performer.feat_list[feat_index]\\n  127: 		player_turn_results.extend(perform(player, feat, entities=entities, fov_map=fov_map))\\n  128  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\n  129  		for result in player_turn_results:\\n  ...\\n  157  				player_turn_results.extend(missile_attack_results)	\\n  158  			elif targets.current_targeting_feat:\\n  159: 				feat_perform_results = perform(player, targets.current_targeting_feat, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\n  160  				player_turn_results.extend(feat_perform_results)\\n  161  				for result in player_turn_results:\\n\\n7 matches across 2 files\\n\",\n  564  			\"settings\":\n  565  			{\n\nC:\\dev\\p3roguelike\\systems\\input_process_system.py:\n  129  		for result in player_turn_results:\n  130  			if result.get('performed'):\n  131: 				print(\"used action via feat\")\n  132  				action_free = False		\n  133  \n\n3 matches across 2 files\n\n\nSearching 75 files for \"used action via\"\n\nC:\\dev\\p3roguelike\\p3RL.sublime-workspace:\n  561  		},\n  562  		{\n  563: 			\"contents\": \"Searching 75 files for \\\"performed\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\p3RL.sublime-workspace:\\n  577  		},\\n  578  		{\\n  579: 			\\\"contents\\\": \\\"Searching 75 files for \\\\\\\"spells_menu\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\menus.py:\\\\n   19  	menu(con, header, options, inventory_width, screen_width, screen_height)\\\\n   20  \\\\n   21: def spells_menu(con, header, spells_width, screen_width, screen_height, player):\\\\n   22  	if len(player.caster.spells) == 0:\\\\n   23  		header = \\\\\\\"You don't know any spells yet.\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\render_functions.py:\\\\n    2  from enum import Enum\\\\n    3  from game_states import GameStates\\\\n    4: from menus import inventory_menu, level_up_menu, character_screen, spells_menu, potion_menu, equipment_menu\\\\n    5  from systems.name_system import get_display_name\\\\n    6  from loader_functions.tile_codes import *\\\\n    .\\\\n   97  \\\\n   98  	elif game_state == GameStates.SPELLS_SCREEN:\\\\n   99: 		spells_menu(con, \\\\\\\"Choose a spell to cast...\\\\\\\", 50, screen_width, screen_height, player)\\\\n  100  \\\\n  101  	elif game_state == GameStates.POTION_SCREEN:\\\\n\\\\n3 matches across 2 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"spell_targeting\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\p3RL.sublime-workspace:\\\\n   98  			[\\\\n   99  				\\\\\\\"spell_\\\\\\\",\\\\n  100: 				\\\\\\\"spell_targeting_result\\\\\\\"\\\\n  101  			],\\\\n  102  			[\\\\n  ...\\\\n 1056  			\\\\\\\"spell_t\\\\\\\",\\\\n 1057  			\\\\\\\"targeting_item\\\\\\\",\\\\n 1058: 			\\\\\\\"spell_targeting\\\\\\\",\\\\n 1059  			\\\\\\\"action_free = False\\\\\\\",\\\\n 1060  			\\\\\\\"game_state = GameStates.PLAYERS_TURN\\\\\\\",\\\\n ....\\\\n 1105  			\\\\\\\"missile_targ\\\\\\\",\\\\n 1106  			\\\\\\\"print(\\\\\\\",\\\\n 1107: 			\\\\\\\"spell_targeting\\\\\\\",\\\\n 1108  			\\\\\\\"game_state = GameStates.TARGETING\\\\\\\",\\\\n 1109  			\\\\\\\"action_free\\\\\\\",\\\\n 1110  			\\\\\\\"targeting_item\\\\\\\",\\\\n 1111: 			\\\\\\\"spell_targeting\\\\\\\",\\\\n 1112  			\\\\\\\":\\\\\\\\n\\\\\\\",\\\\n 1113  			\\\\\\\"handle_de\\\\\\\",\\\\n ....\\\\n 1122  			\\\\\\\"con\\\\\\\",\\\\n 1123  			\\\\\\\"targeting\\\\\\\",\\\\n 1124: 			\\\\\\\"spell_targeting\\\\\\\",\\\\n 1125  			\\\\\\\"spell_tar\\\\\\\",\\\\n 1126  			\\\\\\\"spell_targ\\\\\\\",\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\results_process_system.py:\\\\n   14  		item_dropped = player_turn_result.get('item_dropped')\\\\n   15  		targeting = player_turn_result.get('targeting')\\\\n   16: 		spell_targeting_result = player_turn_result.get('spell_targeting')\\\\n   17  		targeting_cancelled = player_turn_result.get('targeting_cancelled')\\\\n   18  		equip = player_turn_result.get('equip')\\\\n   ..\\\\n   40  			targets.current_targeting_consumable = targeting\\\\n   41  			message_log.add_message(targets.current_targeting_consumable.consumable.targeting_message)\\\\n   42: 		if spell_targeting_result:\\\\n   43  			print(\\\\\\\"result process system picked up the spell targeting result\\\\\\\")\\\\n   44  			previous_game_state = GameStates.PLAYERS_TURN\\\\n   45  			game_state = GameStates.TARGETING\\\\n   46: 			targets.current_targeting_spell = spell_targeting_result\\\\n   47  			message_log.add_message(targets.current_targeting_spell.targeting_message)\\\\n   48  		if missile_targeting:\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\spell_system.py:\\\\n   24  \\\\n   25  	if spell.targeting and not (kwargs.get('target_x') or kwargs.get('target_y')):\\\\n   26: 		print(\\\\\\\"spell system is returning spell_targeting\\\\\\\")\\\\n   27: 		results.append({'spell_targeting': spell})\\\\n   28  	else:\\\\n   29  		kwargs = {**spell.function_kwargs, **kwargs}\\\\n\\\\n11 matches across 3 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"stamina\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\components\\\\\\\\stats.py:\\\\n    1  class Stats:\\\\n    2: 	def __init__(self, Strength=10, Precision=10, Agility=10, Intellect=10, Willpower=10, Stamina=10, Endurance=10):\\\\n    3  		self.Strength = Strength\\\\n    4  		self.Precision = Precision\\\\n    .\\\\n    6  		self.Intellect = Intellect\\\\n    7  		self.Willpower = Willpower\\\\n    8: 		self.Stamina = Stamina\\\\n    9  		self.Endurance = Endurance\\\\n   10: 		self.base_max_hp = self.Stamina + self.Endurance\\\\n   11  		self.hp = self.base_max_hp\\\\n   12  		self.evade = int((self.Agility + self.Precision) / 4)\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\feats.py:\\\\n    1  class Feat:\\\\n    2: 	def __init__(self, name, display_name, parent_skill, minimum_rank, stamina_cost, use_function, targeting, targeting_message, feat_range, **kwargs):\\\\n    3  		self.name = name\\\\n    4  		self.display_name = display_name\\\\n    5  		self.parent_skill = parent_skill\\\\n    6  		self.minimum_rank = minimum_rank\\\\n    7: 		self.stamina_cost = stamina_cost\\\\n    8  		self.use_function = use_function\\\\n    9  		self.targeting = targeting\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\loader_functions\\\\\\\\initialize_new_game.py:\\\\n   72  	defender_component = Defender()\\\\n   73  	performer_component = Performer()\\\\n   74: 	stats_component = Stats(Strength=14, Precision=14, Agility=14, Intellect=14, Willpower=14, Stamina=14, Endurance=14)\\\\n   75  	skills_component = Skills()\\\\n   76  	skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\mocks.py:\\\\n   20  	test_identified = Identified()\\\\n   21  	test_inventory = Inventory(10)\\\\n   22: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   23  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", inventory=test_inventory, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, identified=test_identified)\\\\n   24  	return test_entity\\\\n   ..\\\\n   29  	test_skills_component = Skills()\\\\n   30  	test_equipment_component = Equipment()\\\\n   31: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   32  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n   33  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n   ..\\\\n   44  	test_fighter = Fighter()\\\\n   45  	test_name = Name(\\\\\\\"Mock\\\\\\\")\\\\n   46: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   47  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter, name=test_name)	\\\\n   48  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n   ..\\\\n   57  	test_sword = EquippableFactory.make_longsword()\\\\n   58  	test_equipment_component.main_hand = test_sword	\\\\n   59: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   60  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n   61  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\n   ..\\\\n   72  	test_equipment_component.main_hand = test_sword\\\\n   73  	test_equipment_component.off_hand = test_shield	\\\\n   74: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   75  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\n   76  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n   ..\\\\n   87  	test_equipment_component.main_hand = test_sword\\\\n   88  	test_equipment_component.off_hand = test_shield\\\\n   89: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   90  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n   91  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n   ..\\\\n  101  	test_sword = EquippableFactory.make_longsword()\\\\n  102  	test_equipment_component.main_hand = test_sword\\\\n  103: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  104  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n  105  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\n  ...\\\\n  117  	test_equipment_component.main_hand = test_sword\\\\n  118  	test_equipment_component.off_hand = test_shield	\\\\n  119: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  120  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\n  121  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\n  ...\\\\n  130  	test_bow = EquippableFactory.make_shortbow()\\\\n  131  	test_equipment_component.main_hand = test_bow\\\\n  132: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  133  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n  134  	return test_entity\\\\n  ...\\\\n  144  	test_equipment_component.main_hand = test_bow\\\\n  145  	test_equipment_component.ammunition = test_arrows\\\\n  146: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  147  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n  148  	return test_entity\\\\n  ...\\\\n  157  	test_equipment_component.main_hand = test_sword\\\\n  158  	test_equipment_component.off_hand = test_shield	\\\\n  159: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=14, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  160  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\n  161  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\n  ...\\\\n  167  	test_skills_component = Skills()\\\\n  168  	test_equipment_component = Equipment()\\\\n  169: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=13	, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  170  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component)\\\\n  171  	test_skills_component.set_skill_rank(SkillNames.UNARMED, 1)\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\monsters.py:\\\\n   19  def makeOrc(x, y):\\\\n   20  	fighter_component = Fighter(xp=35)\\\\n   21: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   22  	ai_component = BasicMonster()\\\\n   23  	equipment_component = Equipment()\\\\n   ..\\\\n   40  def makeTroll(x, y):\\\\n   41  	fighter_component = Fighter(xp=100)\\\\n   42: 	stats_component = Stats(Strength=12, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   43  	ai_component = BasicMonster()\\\\n   44  	equipment_component = Equipment()\\\\n   ..\\\\n   58  def makeKobold(x, y):\\\\n   59  	fighter_component = Fighter(xp=30)\\\\n   60: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n   61  	ai_component = BasicMonster()\\\\n   62  	equipment_component = Equipment()\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\rltests.py:\\\\n  115  		test_caster = Caster(spells=[], max_mana=50)\\\\n  116  		test_fighter = Fighter(xp=100)\\\\n  117: 		test_stats = Stats(Strength=1, Precision=1, Agility=1, Intellect=1, Willpower=1, Stamina=1, Endurance=1)\\\\n  118  		test_skills = Skills()\\\\n  119  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", caster=test_caster, fighter=test_fighter, skills=test_skills, stats=test_stats)\\\\n  ...\\\\n  180  class StatsTests(unittest.TestCase):\\\\n  181  	def test_can_create_entity_with_stats(self):\\\\n  182: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  183  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", stats=test_stats_component)\\\\n  184  		self.assertEqual(test_entity.stats, test_stats_component)\\\\n  185  \\\\n  186  	def test_can_calculate_hp(self):\\\\n  187: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  188  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\"Player\\\\\\\", stats=test_stats_component)\\\\n  189  		self.assertEqual(test_entity.stats.max_hp, 19)\\\\n  ...\\\\n  219  \\\\n  220  	def test_can_get_damage_string(self):\\\\n  221: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  222  		test_fighter_component = Fighter(xp=10)\\\\n  223  		test_equipment = Equipment()\\\\n  ...\\\\n  645  	def test_damage_over_time_effects_work(self):\\\\n  646  		fighter_component = Fighter(xp=100)\\\\n  647: 		stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\n  648  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, stats=stats_component, fighter=fighter_component)\\\\n  649  		test_effect = Effect(name=EffectNames.POISON, description=\\\\\\\"Poisoned\\\\\\\", turns_left=5, damage_per_turn=3)\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\feat_system.py:\\\\n   17  	results = []\\\\n   18  \\\\n   19: 	if feat.stamina_cost > entity.stats.stamina:\\\\n   20: 		results.append({'message': Message(\\\\\\\"You don't have enough stamina to perform that feat.\\\\\\\")})\\\\n   21  		return results\\\\n   22  \\\\n   ..\\\\n   26  	else:\\\\n   27  		kwargs = {**feat.function_kwargs, **kwargs}\\\\n   28: 		entity.stats.stamina -= feat.stamina_cost\\\\n   29  		feat_perform_results = feat.use_function(entity, **kwargs)\\\\n   30  \\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\skill_manager.py:\\\\n   35  		return entity.stats.Willpower or 0\\\\n   36  \\\\n   37: def get_stamina(entity):\\\\n   38  	if entity.stats:\\\\n   39: 		return entity.stats.Stamina or 0\\\\n   40  \\\\n   41  def get_endurance(entity):\\\\n\\\\n35 matches across 8 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"feat_perform_re\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\feat_system.py:\\\\n   32  		kwargs = {**feat.function_kwargs, **kwargs}\\\\n   33  		entity.stats.sp -= feat.stamina_cost\\\\n   34: 		feat_perform_results = feat.use_function(entity, **kwargs)\\\\n   35  \\\\n   36: 		results.extend(feat_perform_results)\\\\n   37  		results.append({'performed': spell.name})\\\\n   38  	return results\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\input_process_system.py:\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\n  158  			elif targets.current_targeting_missile:\\\\n  159: 				feat_perform_results = player.fighter.fire_weapon(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\n  161  			action_free = False\\\\n\\\\n3 matches across 2 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"perform(\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\feat_system.py:\\\\n   16  	return feat\\\\n   17  \\\\n   18: def perform(entity, feat, **kwargs):\\\\n   19  	results = []\\\\n   20  	target_x = kwargs.get('target_x')\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\input_process_system.py:\\\\n  126  		feat = player.performer.feat_list[feat_index]\\\\n  127  		print(feat_index)\\\\n  128: 		player_turn_results.extend(perform(player, feat, entities=entities, fov_map=fov_map))\\\\n  129  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\\\n  130  		for result in player_turn_results:\\\\n  ...\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\n  158  			elif targets.current_targeting_missile:\\\\n  159: 				feat_perform_results = perform(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\n  161  			action_free = False\\\\n\\\\n3 matches across 2 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"current_targeting_fe\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\results_process_system.py:\\\\n   51  			previous_game_state = GameStates.PLAYERS_TURN\\\\n   52  			game_state = GameStates.TARGETING\\\\n   53: 			targets.current_targeting_feat = feat_targeting\\\\n   54: 			message_log.add_message(targets.current_targeting_feat.targeting_message)\\\\n   55  		if missile_targeting:\\\\n   56  			previous_game_state = GameStates.PLAYERS_TURN\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\targeting.py:\\\\n    4  		self.current_targeting_spell = None\\\\n    5  		self.current_targeting_missile = False\\\\n    6: 		self.current_targeting_feat = None\\\\n    7  \\\\n    8  	def __str__(self):\\\\n\\\\n3 matches across 2 files\\\\n\\\",\\n  580  			\\\"settings\\\":\\n  581  			{\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\feat_system.py:\\n   39  \\n   40  		results.extend(feat_perform_results)\\n   41: 		results.append({'performed': feat.name})\\n   42  	return results\\n   43  \\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\input_process_system.py:\\n  128  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\n  129  		for result in player_turn_results:\\n  130: 			if result.get('performed'):\\n  131  				print(\\\"used action via feat\\\")\\n  132  				action_free = False		\\n\\n3 matches across 3 files\\n\\n\\nSearching 75 files for \\\"perform(\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\p3RL.sublime-workspace:\\n  561  		},\\n  562  		{\\n  563: 			\\\"contents\\\": \\\"Searching 75 files for \\\\\\\"performed\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\p3RL.sublime-workspace:\\\\n  577  		},\\\\n  578  		{\\\\n  579: 			\\\\\\\"contents\\\\\\\": \\\\\\\"Searching 75 files for \\\\\\\\\\\\\\\"spells_menu\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\menus.py:\\\\\\\\n   19  	menu(con, header, options, inventory_width, screen_width, screen_height)\\\\\\\\n   20  \\\\\\\\n   21: def spells_menu(con, header, spells_width, screen_width, screen_height, player):\\\\\\\\n   22  	if len(player.caster.spells) == 0:\\\\\\\\n   23  		header = \\\\\\\\\\\\\\\"You don't know any spells yet.\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\render_functions.py:\\\\\\\\n    2  from enum import Enum\\\\\\\\n    3  from game_states import GameStates\\\\\\\\n    4: from menus import inventory_menu, level_up_menu, character_screen, spells_menu, potion_menu, equipment_menu\\\\\\\\n    5  from systems.name_system import get_display_name\\\\\\\\n    6  from loader_functions.tile_codes import *\\\\\\\\n    .\\\\\\\\n   97  \\\\\\\\n   98  	elif game_state == GameStates.SPELLS_SCREEN:\\\\\\\\n   99: 		spells_menu(con, \\\\\\\\\\\\\\\"Choose a spell to cast...\\\\\\\\\\\\\\\", 50, screen_width, screen_height, player)\\\\\\\\n  100  \\\\\\\\n  101  	elif game_state == GameStates.POTION_SCREEN:\\\\\\\\n\\\\\\\\n3 matches across 2 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\p3RL.sublime-workspace:\\\\\\\\n   98  			[\\\\\\\\n   99  				\\\\\\\\\\\\\\\"spell_\\\\\\\\\\\\\\\",\\\\\\\\n  100: 				\\\\\\\\\\\\\\\"spell_targeting_result\\\\\\\\\\\\\\\"\\\\\\\\n  101  			],\\\\\\\\n  102  			[\\\\\\\\n  ...\\\\\\\\n 1056  			\\\\\\\\\\\\\\\"spell_t\\\\\\\\\\\\\\\",\\\\\\\\n 1057  			\\\\\\\\\\\\\\\"targeting_item\\\\\\\\\\\\\\\",\\\\\\\\n 1058: 			\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1059  			\\\\\\\\\\\\\\\"action_free = False\\\\\\\\\\\\\\\",\\\\\\\\n 1060  			\\\\\\\\\\\\\\\"game_state = GameStates.PLAYERS_TURN\\\\\\\\\\\\\\\",\\\\\\\\n ....\\\\\\\\n 1105  			\\\\\\\\\\\\\\\"missile_targ\\\\\\\\\\\\\\\",\\\\\\\\n 1106  			\\\\\\\\\\\\\\\"print(\\\\\\\\\\\\\\\",\\\\\\\\n 1107: 			\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1108  			\\\\\\\\\\\\\\\"game_state = GameStates.TARGETING\\\\\\\\\\\\\\\",\\\\\\\\n 1109  			\\\\\\\\\\\\\\\"action_free\\\\\\\\\\\\\\\",\\\\\\\\n 1110  			\\\\\\\\\\\\\\\"targeting_item\\\\\\\\\\\\\\\",\\\\\\\\n 1111: 			\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1112  			\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\",\\\\\\\\n 1113  			\\\\\\\\\\\\\\\"handle_de\\\\\\\\\\\\\\\",\\\\\\\\n ....\\\\\\\\n 1122  			\\\\\\\\\\\\\\\"con\\\\\\\\\\\\\\\",\\\\\\\\n 1123  			\\\\\\\\\\\\\\\"targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1124: 			\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1125  			\\\\\\\\\\\\\\\"spell_tar\\\\\\\\\\\\\\\",\\\\\\\\n 1126  			\\\\\\\\\\\\\\\"spell_targ\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\results_process_system.py:\\\\\\\\n   14  		item_dropped = player_turn_result.get('item_dropped')\\\\\\\\n   15  		targeting = player_turn_result.get('targeting')\\\\\\\\n   16: 		spell_targeting_result = player_turn_result.get('spell_targeting')\\\\\\\\n   17  		targeting_cancelled = player_turn_result.get('targeting_cancelled')\\\\\\\\n   18  		equip = player_turn_result.get('equip')\\\\\\\\n   ..\\\\\\\\n   40  			targets.current_targeting_consumable = targeting\\\\\\\\n   41  			message_log.add_message(targets.current_targeting_consumable.consumable.targeting_message)\\\\\\\\n   42: 		if spell_targeting_result:\\\\\\\\n   43  			print(\\\\\\\\\\\\\\\"result process system picked up the spell targeting result\\\\\\\\\\\\\\\")\\\\\\\\n   44  			previous_game_state = GameStates.PLAYERS_TURN\\\\\\\\n   45  			game_state = GameStates.TARGETING\\\\\\\\n   46: 			targets.current_targeting_spell = spell_targeting_result\\\\\\\\n   47  			message_log.add_message(targets.current_targeting_spell.targeting_message)\\\\\\\\n   48  		if missile_targeting:\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\spell_system.py:\\\\\\\\n   24  \\\\\\\\n   25  	if spell.targeting and not (kwargs.get('target_x') or kwargs.get('target_y')):\\\\\\\\n   26: 		print(\\\\\\\\\\\\\\\"spell system is returning spell_targeting\\\\\\\\\\\\\\\")\\\\\\\\n   27: 		results.append({'spell_targeting': spell})\\\\\\\\n   28  	else:\\\\\\\\n   29  		kwargs = {**spell.function_kwargs, **kwargs}\\\\\\\\n\\\\\\\\n11 matches across 3 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"stamina\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\components\\\\\\\\\\\\\\\\stats.py:\\\\\\\\n    1  class Stats:\\\\\\\\n    2: 	def __init__(self, Strength=10, Precision=10, Agility=10, Intellect=10, Willpower=10, Stamina=10, Endurance=10):\\\\\\\\n    3  		self.Strength = Strength\\\\\\\\n    4  		self.Precision = Precision\\\\\\\\n    .\\\\\\\\n    6  		self.Intellect = Intellect\\\\\\\\n    7  		self.Willpower = Willpower\\\\\\\\n    8: 		self.Stamina = Stamina\\\\\\\\n    9  		self.Endurance = Endurance\\\\\\\\n   10: 		self.base_max_hp = self.Stamina + self.Endurance\\\\\\\\n   11  		self.hp = self.base_max_hp\\\\\\\\n   12  		self.evade = int((self.Agility + self.Precision) / 4)\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\feats.py:\\\\\\\\n    1  class Feat:\\\\\\\\n    2: 	def __init__(self, name, display_name, parent_skill, minimum_rank, stamina_cost, use_function, targeting, targeting_message, feat_range, **kwargs):\\\\\\\\n    3  		self.name = name\\\\\\\\n    4  		self.display_name = display_name\\\\\\\\n    5  		self.parent_skill = parent_skill\\\\\\\\n    6  		self.minimum_rank = minimum_rank\\\\\\\\n    7: 		self.stamina_cost = stamina_cost\\\\\\\\n    8  		self.use_function = use_function\\\\\\\\n    9  		self.targeting = targeting\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\loader_functions\\\\\\\\\\\\\\\\initialize_new_game.py:\\\\\\\\n   72  	defender_component = Defender()\\\\\\\\n   73  	performer_component = Performer()\\\\\\\\n   74: 	stats_component = Stats(Strength=14, Precision=14, Agility=14, Intellect=14, Willpower=14, Stamina=14, Endurance=14)\\\\\\\\n   75  	skills_component = Skills()\\\\\\\\n   76  	skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\mocks.py:\\\\\\\\n   20  	test_identified = Identified()\\\\\\\\n   21  	test_inventory = Inventory(10)\\\\\\\\n   22: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   23  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", inventory=test_inventory, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, identified=test_identified)\\\\\\\\n   24  	return test_entity\\\\\\\\n   ..\\\\\\\\n   29  	test_skills_component = Skills()\\\\\\\\n   30  	test_equipment_component = Equipment()\\\\\\\\n   31: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   32  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n   33  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n   ..\\\\\\\\n   44  	test_fighter = Fighter()\\\\\\\\n   45  	test_name = Name(\\\\\\\\\\\\\\\"Mock\\\\\\\\\\\\\\\")\\\\\\\\n   46: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   47  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter, name=test_name)	\\\\\\\\n   48  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n   ..\\\\\\\\n   57  	test_sword = EquippableFactory.make_longsword()\\\\\\\\n   58  	test_equipment_component.main_hand = test_sword	\\\\\\\\n   59: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   60  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n   61  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\\\\\n   ..\\\\\\\\n   72  	test_equipment_component.main_hand = test_sword\\\\\\\\n   73  	test_equipment_component.off_hand = test_shield	\\\\\\\\n   74: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   75  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\\\\\n   76  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n   ..\\\\\\\\n   87  	test_equipment_component.main_hand = test_sword\\\\\\\\n   88  	test_equipment_component.off_hand = test_shield\\\\\\\\n   89: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   90  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n   91  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n   ..\\\\\\\\n  101  	test_sword = EquippableFactory.make_longsword()\\\\\\\\n  102  	test_equipment_component.main_hand = test_sword\\\\\\\\n  103: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  104  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n  105  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\\\\\n  ...\\\\\\\\n  117  	test_equipment_component.main_hand = test_sword\\\\\\\\n  118  	test_equipment_component.off_hand = test_shield	\\\\\\\\n  119: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  120  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\\\\\n  121  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\\\\\n  ...\\\\\\\\n  130  	test_bow = EquippableFactory.make_shortbow()\\\\\\\\n  131  	test_equipment_component.main_hand = test_bow\\\\\\\\n  132: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  133  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n  134  	return test_entity\\\\\\\\n  ...\\\\\\\\n  144  	test_equipment_component.main_hand = test_bow\\\\\\\\n  145  	test_equipment_component.ammunition = test_arrows\\\\\\\\n  146: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  147  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n  148  	return test_entity\\\\\\\\n  ...\\\\\\\\n  157  	test_equipment_component.main_hand = test_sword\\\\\\\\n  158  	test_equipment_component.off_hand = test_shield	\\\\\\\\n  159: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=14, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  160  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n  161  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n  ...\\\\\\\\n  167  	test_skills_component = Skills()\\\\\\\\n  168  	test_equipment_component = Equipment()\\\\\\\\n  169: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=13	, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  170  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component)\\\\\\\\n  171  	test_skills_component.set_skill_rank(SkillNames.UNARMED, 1)\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\monsters.py:\\\\\\\\n   19  def makeOrc(x, y):\\\\\\\\n   20  	fighter_component = Fighter(xp=35)\\\\\\\\n   21: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   22  	ai_component = BasicMonster()\\\\\\\\n   23  	equipment_component = Equipment()\\\\\\\\n   ..\\\\\\\\n   40  def makeTroll(x, y):\\\\\\\\n   41  	fighter_component = Fighter(xp=100)\\\\\\\\n   42: 	stats_component = Stats(Strength=12, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   43  	ai_component = BasicMonster()\\\\\\\\n   44  	equipment_component = Equipment()\\\\\\\\n   ..\\\\\\\\n   58  def makeKobold(x, y):\\\\\\\\n   59  	fighter_component = Fighter(xp=30)\\\\\\\\n   60: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   61  	ai_component = BasicMonster()\\\\\\\\n   62  	equipment_component = Equipment()\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\rltests.py:\\\\\\\\n  115  		test_caster = Caster(spells=[], max_mana=50)\\\\\\\\n  116  		test_fighter = Fighter(xp=100)\\\\\\\\n  117: 		test_stats = Stats(Strength=1, Precision=1, Agility=1, Intellect=1, Willpower=1, Stamina=1, Endurance=1)\\\\\\\\n  118  		test_skills = Skills()\\\\\\\\n  119  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", caster=test_caster, fighter=test_fighter, skills=test_skills, stats=test_stats)\\\\\\\\n  ...\\\\\\\\n  180  class StatsTests(unittest.TestCase):\\\\\\\\n  181  	def test_can_create_entity_with_stats(self):\\\\\\\\n  182: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  183  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", stats=test_stats_component)\\\\\\\\n  184  		self.assertEqual(test_entity.stats, test_stats_component)\\\\\\\\n  185  \\\\\\\\n  186  	def test_can_calculate_hp(self):\\\\\\\\n  187: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  188  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", stats=test_stats_component)\\\\\\\\n  189  		self.assertEqual(test_entity.stats.max_hp, 19)\\\\\\\\n  ...\\\\\\\\n  219  \\\\\\\\n  220  	def test_can_get_damage_string(self):\\\\\\\\n  221: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  222  		test_fighter_component = Fighter(xp=10)\\\\\\\\n  223  		test_equipment = Equipment()\\\\\\\\n  ...\\\\\\\\n  645  	def test_damage_over_time_effects_work(self):\\\\\\\\n  646  		fighter_component = Fighter(xp=100)\\\\\\\\n  647: 		stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  648  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, stats=stats_component, fighter=fighter_component)\\\\\\\\n  649  		test_effect = Effect(name=EffectNames.POISON, description=\\\\\\\\\\\\\\\"Poisoned\\\\\\\\\\\\\\\", turns_left=5, damage_per_turn=3)\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\n   17  	results = []\\\\\\\\n   18  \\\\\\\\n   19: 	if feat.stamina_cost > entity.stats.stamina:\\\\\\\\n   20: 		results.append({'message': Message(\\\\\\\\\\\\\\\"You don't have enough stamina to perform that feat.\\\\\\\\\\\\\\\")})\\\\\\\\n   21  		return results\\\\\\\\n   22  \\\\\\\\n   ..\\\\\\\\n   26  	else:\\\\\\\\n   27  		kwargs = {**feat.function_kwargs, **kwargs}\\\\\\\\n   28: 		entity.stats.stamina -= feat.stamina_cost\\\\\\\\n   29  		feat_perform_results = feat.use_function(entity, **kwargs)\\\\\\\\n   30  \\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\skill_manager.py:\\\\\\\\n   35  		return entity.stats.Willpower or 0\\\\\\\\n   36  \\\\\\\\n   37: def get_stamina(entity):\\\\\\\\n   38  	if entity.stats:\\\\\\\\n   39: 		return entity.stats.Stamina or 0\\\\\\\\n   40  \\\\\\\\n   41  def get_endurance(entity):\\\\\\\\n\\\\\\\\n35 matches across 8 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"feat_perform_re\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\n   32  		kwargs = {**feat.function_kwargs, **kwargs}\\\\\\\\n   33  		entity.stats.sp -= feat.stamina_cost\\\\\\\\n   34: 		feat_perform_results = feat.use_function(entity, **kwargs)\\\\\\\\n   35  \\\\\\\\n   36: 		results.extend(feat_perform_results)\\\\\\\\n   37  		results.append({'performed': spell.name})\\\\\\\\n   38  	return results\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\input_process_system.py:\\\\\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\\\\\n  158  			elif targets.current_targeting_missile:\\\\\\\\n  159: 				feat_perform_results = player.fighter.fire_weapon(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\\\\\n  161  			action_free = False\\\\\\\\n\\\\\\\\n3 matches across 2 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"perform(\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\n   16  	return feat\\\\\\\\n   17  \\\\\\\\n   18: def perform(entity, feat, **kwargs):\\\\\\\\n   19  	results = []\\\\\\\\n   20  	target_x = kwargs.get('target_x')\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\input_process_system.py:\\\\\\\\n  126  		feat = player.performer.feat_list[feat_index]\\\\\\\\n  127  		print(feat_index)\\\\\\\\n  128: 		player_turn_results.extend(perform(player, feat, entities=entities, fov_map=fov_map))\\\\\\\\n  129  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\\\\\\\n  130  		for result in player_turn_results:\\\\\\\\n  ...\\\\\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\\\\\n  158  			elif targets.current_targeting_missile:\\\\\\\\n  159: 				feat_perform_results = perform(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\\\\\n  161  			action_free = False\\\\\\\\n\\\\\\\\n3 matches across 2 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"current_targeting_fe\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\results_process_system.py:\\\\\\\\n   51  			previous_game_state = GameStates.PLAYERS_TURN\\\\\\\\n   52  			game_state = GameStates.TARGETING\\\\\\\\n   53: 			targets.current_targeting_feat = feat_targeting\\\\\\\\n   54: 			message_log.add_message(targets.current_targeting_feat.targeting_message)\\\\\\\\n   55  		if missile_targeting:\\\\\\\\n   56  			previous_game_state = GameStates.PLAYERS_TURN\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\targeting.py:\\\\\\\\n    4  		self.current_targeting_spell = None\\\\\\\\n    5  		self.current_targeting_missile = False\\\\\\\\n    6: 		self.current_targeting_feat = None\\\\\\\\n    7  \\\\\\\\n    8  	def __str__(self):\\\\\\\\n\\\\\\\\n3 matches across 2 files\\\\\\\\n\\\\\\\",\\\\n  580  			\\\\\\\"settings\\\\\\\":\\\\n  581  			{\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\feat_system.py:\\\\n   39  \\\\n   40  		results.extend(feat_perform_results)\\\\n   41: 		results.append({'performed': feat.name})\\\\n   42  	return results\\\\n   43  \\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\input_process_system.py:\\\\n  128  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\\\n  129  		for result in player_turn_results:\\\\n  130: 			if result.get('performed'):\\\\n  131  				print(\\\\\\\"used action via feat\\\\\\\")\\\\n  132  				action_free = False		\\\\n\\\\n3 matches across 3 files\\\\n\\\",\\n  564  			\\\"settings\\\":\\n  565  			{\\n  ...\\n 1031  			\\\"performed\\\",\\n 1032  			\\\"current_targeting_fe\\\",\\n 1033: 			\\\"perform(\\\",\\n 1034  			\\\"feat_perform_re\\\",\\n 1035  			\\\"stamina\\\",\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\input_process_system.py:\\n  125  	if feat_index is not None and feat_index < len(player.performer.feat_list):\\n  126  		feat = player.performer.feat_list[feat_index]\\n  127: 		player_turn_results.extend(perform(player, feat, entities=entities, fov_map=fov_map))\\n  128  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\n  129  		for result in player_turn_results:\\n  ...\\n  157  				player_turn_results.extend(missile_attack_results)	\\n  158  			elif targets.current_targeting_feat:\\n  159: 				feat_perform_results = perform(player, targets.current_targeting_feat, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\n  160  				player_turn_results.extend(feat_perform_results)\\n  161  				for result in player_turn_results:\\n\\n7 matches across 2 files\\n\\n\\nSearching 75 files for \\\"used action via\\\"\\n\\nC:\\\\dev\\\\p3roguelike\\\\p3RL.sublime-workspace:\\n  561  		},\\n  562  		{\\n  563: 			\\\"contents\\\": \\\"Searching 75 files for \\\\\\\"performed\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\p3RL.sublime-workspace:\\\\n  577  		},\\\\n  578  		{\\\\n  579: 			\\\\\\\"contents\\\\\\\": \\\\\\\"Searching 75 files for \\\\\\\\\\\\\\\"spells_menu\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\menus.py:\\\\\\\\n   19  	menu(con, header, options, inventory_width, screen_width, screen_height)\\\\\\\\n   20  \\\\\\\\n   21: def spells_menu(con, header, spells_width, screen_width, screen_height, player):\\\\\\\\n   22  	if len(player.caster.spells) == 0:\\\\\\\\n   23  		header = \\\\\\\\\\\\\\\"You don't know any spells yet.\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\render_functions.py:\\\\\\\\n    2  from enum import Enum\\\\\\\\n    3  from game_states import GameStates\\\\\\\\n    4: from menus import inventory_menu, level_up_menu, character_screen, spells_menu, potion_menu, equipment_menu\\\\\\\\n    5  from systems.name_system import get_display_name\\\\\\\\n    6  from loader_functions.tile_codes import *\\\\\\\\n    .\\\\\\\\n   97  \\\\\\\\n   98  	elif game_state == GameStates.SPELLS_SCREEN:\\\\\\\\n   99: 		spells_menu(con, \\\\\\\\\\\\\\\"Choose a spell to cast...\\\\\\\\\\\\\\\", 50, screen_width, screen_height, player)\\\\\\\\n  100  \\\\\\\\n  101  	elif game_state == GameStates.POTION_SCREEN:\\\\\\\\n\\\\\\\\n3 matches across 2 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\p3RL.sublime-workspace:\\\\\\\\n   98  			[\\\\\\\\n   99  				\\\\\\\\\\\\\\\"spell_\\\\\\\\\\\\\\\",\\\\\\\\n  100: 				\\\\\\\\\\\\\\\"spell_targeting_result\\\\\\\\\\\\\\\"\\\\\\\\n  101  			],\\\\\\\\n  102  			[\\\\\\\\n  ...\\\\\\\\n 1056  			\\\\\\\\\\\\\\\"spell_t\\\\\\\\\\\\\\\",\\\\\\\\n 1057  			\\\\\\\\\\\\\\\"targeting_item\\\\\\\\\\\\\\\",\\\\\\\\n 1058: 			\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1059  			\\\\\\\\\\\\\\\"action_free = False\\\\\\\\\\\\\\\",\\\\\\\\n 1060  			\\\\\\\\\\\\\\\"game_state = GameStates.PLAYERS_TURN\\\\\\\\\\\\\\\",\\\\\\\\n ....\\\\\\\\n 1105  			\\\\\\\\\\\\\\\"missile_targ\\\\\\\\\\\\\\\",\\\\\\\\n 1106  			\\\\\\\\\\\\\\\"print(\\\\\\\\\\\\\\\",\\\\\\\\n 1107: 			\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1108  			\\\\\\\\\\\\\\\"game_state = GameStates.TARGETING\\\\\\\\\\\\\\\",\\\\\\\\n 1109  			\\\\\\\\\\\\\\\"action_free\\\\\\\\\\\\\\\",\\\\\\\\n 1110  			\\\\\\\\\\\\\\\"targeting_item\\\\\\\\\\\\\\\",\\\\\\\\n 1111: 			\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1112  			\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\",\\\\\\\\n 1113  			\\\\\\\\\\\\\\\"handle_de\\\\\\\\\\\\\\\",\\\\\\\\n ....\\\\\\\\n 1122  			\\\\\\\\\\\\\\\"con\\\\\\\\\\\\\\\",\\\\\\\\n 1123  			\\\\\\\\\\\\\\\"targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1124: 			\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\",\\\\\\\\n 1125  			\\\\\\\\\\\\\\\"spell_tar\\\\\\\\\\\\\\\",\\\\\\\\n 1126  			\\\\\\\\\\\\\\\"spell_targ\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\results_process_system.py:\\\\\\\\n   14  		item_dropped = player_turn_result.get('item_dropped')\\\\\\\\n   15  		targeting = player_turn_result.get('targeting')\\\\\\\\n   16: 		spell_targeting_result = player_turn_result.get('spell_targeting')\\\\\\\\n   17  		targeting_cancelled = player_turn_result.get('targeting_cancelled')\\\\\\\\n   18  		equip = player_turn_result.get('equip')\\\\\\\\n   ..\\\\\\\\n   40  			targets.current_targeting_consumable = targeting\\\\\\\\n   41  			message_log.add_message(targets.current_targeting_consumable.consumable.targeting_message)\\\\\\\\n   42: 		if spell_targeting_result:\\\\\\\\n   43  			print(\\\\\\\\\\\\\\\"result process system picked up the spell targeting result\\\\\\\\\\\\\\\")\\\\\\\\n   44  			previous_game_state = GameStates.PLAYERS_TURN\\\\\\\\n   45  			game_state = GameStates.TARGETING\\\\\\\\n   46: 			targets.current_targeting_spell = spell_targeting_result\\\\\\\\n   47  			message_log.add_message(targets.current_targeting_spell.targeting_message)\\\\\\\\n   48  		if missile_targeting:\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\spell_system.py:\\\\\\\\n   24  \\\\\\\\n   25  	if spell.targeting and not (kwargs.get('target_x') or kwargs.get('target_y')):\\\\\\\\n   26: 		print(\\\\\\\\\\\\\\\"spell system is returning spell_targeting\\\\\\\\\\\\\\\")\\\\\\\\n   27: 		results.append({'spell_targeting': spell})\\\\\\\\n   28  	else:\\\\\\\\n   29  		kwargs = {**spell.function_kwargs, **kwargs}\\\\\\\\n\\\\\\\\n11 matches across 3 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"stamina\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\components\\\\\\\\\\\\\\\\stats.py:\\\\\\\\n    1  class Stats:\\\\\\\\n    2: 	def __init__(self, Strength=10, Precision=10, Agility=10, Intellect=10, Willpower=10, Stamina=10, Endurance=10):\\\\\\\\n    3  		self.Strength = Strength\\\\\\\\n    4  		self.Precision = Precision\\\\\\\\n    .\\\\\\\\n    6  		self.Intellect = Intellect\\\\\\\\n    7  		self.Willpower = Willpower\\\\\\\\n    8: 		self.Stamina = Stamina\\\\\\\\n    9  		self.Endurance = Endurance\\\\\\\\n   10: 		self.base_max_hp = self.Stamina + self.Endurance\\\\\\\\n   11  		self.hp = self.base_max_hp\\\\\\\\n   12  		self.evade = int((self.Agility + self.Precision) / 4)\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\feats.py:\\\\\\\\n    1  class Feat:\\\\\\\\n    2: 	def __init__(self, name, display_name, parent_skill, minimum_rank, stamina_cost, use_function, targeting, targeting_message, feat_range, **kwargs):\\\\\\\\n    3  		self.name = name\\\\\\\\n    4  		self.display_name = display_name\\\\\\\\n    5  		self.parent_skill = parent_skill\\\\\\\\n    6  		self.minimum_rank = minimum_rank\\\\\\\\n    7: 		self.stamina_cost = stamina_cost\\\\\\\\n    8  		self.use_function = use_function\\\\\\\\n    9  		self.targeting = targeting\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\loader_functions\\\\\\\\\\\\\\\\initialize_new_game.py:\\\\\\\\n   72  	defender_component = Defender()\\\\\\\\n   73  	performer_component = Performer()\\\\\\\\n   74: 	stats_component = Stats(Strength=14, Precision=14, Agility=14, Intellect=14, Willpower=14, Stamina=14, Endurance=14)\\\\\\\\n   75  	skills_component = Skills()\\\\\\\\n   76  	skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\mocks.py:\\\\\\\\n   20  	test_identified = Identified()\\\\\\\\n   21  	test_inventory = Inventory(10)\\\\\\\\n   22: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   23  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", inventory=test_inventory, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, identified=test_identified)\\\\\\\\n   24  	return test_entity\\\\\\\\n   ..\\\\\\\\n   29  	test_skills_component = Skills()\\\\\\\\n   30  	test_equipment_component = Equipment()\\\\\\\\n   31: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   32  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n   33  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n   ..\\\\\\\\n   44  	test_fighter = Fighter()\\\\\\\\n   45  	test_name = Name(\\\\\\\\\\\\\\\"Mock\\\\\\\\\\\\\\\")\\\\\\\\n   46: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   47  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter, name=test_name)	\\\\\\\\n   48  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n   ..\\\\\\\\n   57  	test_sword = EquippableFactory.make_longsword()\\\\\\\\n   58  	test_equipment_component.main_hand = test_sword	\\\\\\\\n   59: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   60  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n   61  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\\\\\n   ..\\\\\\\\n   72  	test_equipment_component.main_hand = test_sword\\\\\\\\n   73  	test_equipment_component.off_hand = test_shield	\\\\\\\\n   74: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   75  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\\\\\n   76  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n   ..\\\\\\\\n   87  	test_equipment_component.main_hand = test_sword\\\\\\\\n   88  	test_equipment_component.off_hand = test_shield\\\\\\\\n   89: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   90  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n   91  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n   ..\\\\\\\\n  101  	test_sword = EquippableFactory.make_longsword()\\\\\\\\n  102  	test_equipment_component.main_hand = test_sword\\\\\\\\n  103: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  104  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n  105  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\\\\\n  ...\\\\\\\\n  117  	test_equipment_component.main_hand = test_sword\\\\\\\\n  118  	test_equipment_component.off_hand = test_shield	\\\\\\\\n  119: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  120  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\\\\\n  121  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\\\\\n  ...\\\\\\\\n  130  	test_bow = EquippableFactory.make_shortbow()\\\\\\\\n  131  	test_equipment_component.main_hand = test_bow\\\\\\\\n  132: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  133  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n  134  	return test_entity\\\\\\\\n  ...\\\\\\\\n  144  	test_equipment_component.main_hand = test_bow\\\\\\\\n  145  	test_equipment_component.ammunition = test_arrows\\\\\\\\n  146: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  147  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n  148  	return test_entity\\\\\\\\n  ...\\\\\\\\n  157  	test_equipment_component.main_hand = test_sword\\\\\\\\n  158  	test_equipment_component.off_hand = test_shield	\\\\\\\\n  159: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=14, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  160  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\n  161  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\n  ...\\\\\\\\n  167  	test_skills_component = Skills()\\\\\\\\n  168  	test_equipment_component = Equipment()\\\\\\\\n  169: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=13	, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  170  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component)\\\\\\\\n  171  	test_skills_component.set_skill_rank(SkillNames.UNARMED, 1)\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\monsters.py:\\\\\\\\n   19  def makeOrc(x, y):\\\\\\\\n   20  	fighter_component = Fighter(xp=35)\\\\\\\\n   21: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   22  	ai_component = BasicMonster()\\\\\\\\n   23  	equipment_component = Equipment()\\\\\\\\n   ..\\\\\\\\n   40  def makeTroll(x, y):\\\\\\\\n   41  	fighter_component = Fighter(xp=100)\\\\\\\\n   42: 	stats_component = Stats(Strength=12, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   43  	ai_component = BasicMonster()\\\\\\\\n   44  	equipment_component = Equipment()\\\\\\\\n   ..\\\\\\\\n   58  def makeKobold(x, y):\\\\\\\\n   59  	fighter_component = Fighter(xp=30)\\\\\\\\n   60: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n   61  	ai_component = BasicMonster()\\\\\\\\n   62  	equipment_component = Equipment()\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\rltests.py:\\\\\\\\n  115  		test_caster = Caster(spells=[], max_mana=50)\\\\\\\\n  116  		test_fighter = Fighter(xp=100)\\\\\\\\n  117: 		test_stats = Stats(Strength=1, Precision=1, Agility=1, Intellect=1, Willpower=1, Stamina=1, Endurance=1)\\\\\\\\n  118  		test_skills = Skills()\\\\\\\\n  119  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", caster=test_caster, fighter=test_fighter, skills=test_skills, stats=test_stats)\\\\\\\\n  ...\\\\\\\\n  180  class StatsTests(unittest.TestCase):\\\\\\\\n  181  	def test_can_create_entity_with_stats(self):\\\\\\\\n  182: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  183  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", stats=test_stats_component)\\\\\\\\n  184  		self.assertEqual(test_entity.stats, test_stats_component)\\\\\\\\n  185  \\\\\\\\n  186  	def test_can_calculate_hp(self):\\\\\\\\n  187: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  188  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\", stats=test_stats_component)\\\\\\\\n  189  		self.assertEqual(test_entity.stats.max_hp, 19)\\\\\\\\n  ...\\\\\\\\n  219  \\\\\\\\n  220  	def test_can_get_damage_string(self):\\\\\\\\n  221: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  222  		test_fighter_component = Fighter(xp=10)\\\\\\\\n  223  		test_equipment = Equipment()\\\\\\\\n  ...\\\\\\\\n  645  	def test_damage_over_time_effects_work(self):\\\\\\\\n  646  		fighter_component = Fighter(xp=100)\\\\\\\\n  647: 		stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\n  648  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, stats=stats_component, fighter=fighter_component)\\\\\\\\n  649  		test_effect = Effect(name=EffectNames.POISON, description=\\\\\\\\\\\\\\\"Poisoned\\\\\\\\\\\\\\\", turns_left=5, damage_per_turn=3)\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\n   17  	results = []\\\\\\\\n   18  \\\\\\\\n   19: 	if feat.stamina_cost > entity.stats.stamina:\\\\\\\\n   20: 		results.append({'message': Message(\\\\\\\\\\\\\\\"You don't have enough stamina to perform that feat.\\\\\\\\\\\\\\\")})\\\\\\\\n   21  		return results\\\\\\\\n   22  \\\\\\\\n   ..\\\\\\\\n   26  	else:\\\\\\\\n   27  		kwargs = {**feat.function_kwargs, **kwargs}\\\\\\\\n   28: 		entity.stats.stamina -= feat.stamina_cost\\\\\\\\n   29  		feat_perform_results = feat.use_function(entity, **kwargs)\\\\\\\\n   30  \\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\skill_manager.py:\\\\\\\\n   35  		return entity.stats.Willpower or 0\\\\\\\\n   36  \\\\\\\\n   37: def get_stamina(entity):\\\\\\\\n   38  	if entity.stats:\\\\\\\\n   39: 		return entity.stats.Stamina or 0\\\\\\\\n   40  \\\\\\\\n   41  def get_endurance(entity):\\\\\\\\n\\\\\\\\n35 matches across 8 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"feat_perform_re\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\n   32  		kwargs = {**feat.function_kwargs, **kwargs}\\\\\\\\n   33  		entity.stats.sp -= feat.stamina_cost\\\\\\\\n   34: 		feat_perform_results = feat.use_function(entity, **kwargs)\\\\\\\\n   35  \\\\\\\\n   36: 		results.extend(feat_perform_results)\\\\\\\\n   37  		results.append({'performed': spell.name})\\\\\\\\n   38  	return results\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\input_process_system.py:\\\\\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\\\\\n  158  			elif targets.current_targeting_missile:\\\\\\\\n  159: 				feat_perform_results = player.fighter.fire_weapon(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\\\\\n  161  			action_free = False\\\\\\\\n\\\\\\\\n3 matches across 2 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"perform(\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\n   16  	return feat\\\\\\\\n   17  \\\\\\\\n   18: def perform(entity, feat, **kwargs):\\\\\\\\n   19  	results = []\\\\\\\\n   20  	target_x = kwargs.get('target_x')\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\input_process_system.py:\\\\\\\\n  126  		feat = player.performer.feat_list[feat_index]\\\\\\\\n  127  		print(feat_index)\\\\\\\\n  128: 		player_turn_results.extend(perform(player, feat, entities=entities, fov_map=fov_map))\\\\\\\\n  129  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\\\\\\\n  130  		for result in player_turn_results:\\\\\\\\n  ...\\\\\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\\\\\n  158  			elif targets.current_targeting_missile:\\\\\\\\n  159: 				feat_perform_results = perform(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\\\\\n  161  			action_free = False\\\\\\\\n\\\\\\\\n3 matches across 2 files\\\\\\\\n\\\\\\\\n\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\"current_targeting_fe\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\results_process_system.py:\\\\\\\\n   51  			previous_game_state = GameStates.PLAYERS_TURN\\\\\\\\n   52  			game_state = GameStates.TARGETING\\\\\\\\n   53: 			targets.current_targeting_feat = feat_targeting\\\\\\\\n   54: 			message_log.add_message(targets.current_targeting_feat.targeting_message)\\\\\\\\n   55  		if missile_targeting:\\\\\\\\n   56  			previous_game_state = GameStates.PLAYERS_TURN\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\targeting.py:\\\\\\\\n    4  		self.current_targeting_spell = None\\\\\\\\n    5  		self.current_targeting_missile = False\\\\\\\\n    6: 		self.current_targeting_feat = None\\\\\\\\n    7  \\\\\\\\n    8  	def __str__(self):\\\\\\\\n\\\\\\\\n3 matches across 2 files\\\\\\\\n\\\\\\\",\\\\n  580  			\\\\\\\"settings\\\\\\\":\\\\n  581  			{\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\feat_system.py:\\\\n   39  \\\\n   40  		results.extend(feat_perform_results)\\\\n   41: 		results.append({'performed': feat.name})\\\\n   42  	return results\\\\n   43  \\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\input_process_system.py:\\\\n  128  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\\\n  129  		for result in player_turn_results:\\\\n  130: 			if result.get('performed'):\\\\n  131  				print(\\\\\\\"used action via feat\\\\\\\")\\\\n  132  				action_free = False		\\\\n\\\\n3 matches across 3 files\\\\n\\\\n\\\\nSearching 75 files for \\\\\\\"perform(\\\\\\\"\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\p3RL.sublime-workspace:\\\\n  561  		},\\\\n  562  		{\\\\n  563: 			\\\\\\\"contents\\\\\\\": \\\\\\\"Searching 75 files for \\\\\\\\\\\\\\\"performed\\\\\\\\\\\\\\\"\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\p3RL.sublime-workspace:\\\\\\\\n  577  		},\\\\\\\\n  578  		{\\\\\\\\n  579: 			\\\\\\\\\\\\\\\"contents\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"Searching 75 files for \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"spells_menu\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\menus.py:\\\\\\\\\\\\\\\\n   19  	menu(con, header, options, inventory_width, screen_width, screen_height)\\\\\\\\\\\\\\\\n   20  \\\\\\\\\\\\\\\\n   21: def spells_menu(con, header, spells_width, screen_width, screen_height, player):\\\\\\\\\\\\\\\\n   22  	if len(player.caster.spells) == 0:\\\\\\\\\\\\\\\\n   23  		header = \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"You don't know any spells yet.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\render_functions.py:\\\\\\\\\\\\\\\\n    2  from enum import Enum\\\\\\\\\\\\\\\\n    3  from game_states import GameStates\\\\\\\\\\\\\\\\n    4: from menus import inventory_menu, level_up_menu, character_screen, spells_menu, potion_menu, equipment_menu\\\\\\\\\\\\\\\\n    5  from systems.name_system import get_display_name\\\\\\\\\\\\\\\\n    6  from loader_functions.tile_codes import *\\\\\\\\\\\\\\\\n    .\\\\\\\\\\\\\\\\n   97  \\\\\\\\\\\\\\\\n   98  	elif game_state == GameStates.SPELLS_SCREEN:\\\\\\\\\\\\\\\\n   99: 		spells_menu(con, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Choose a spell to cast...\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", 50, screen_width, screen_height, player)\\\\\\\\\\\\\\\\n  100  \\\\\\\\\\\\\\\\n  101  	elif game_state == GameStates.POTION_SCREEN:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n3 matches across 2 files\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3RL.sublime-workspace:\\\\\\\\\\\\\\\\n   98  			[\\\\\\\\\\\\\\\\n   99  				\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"spell_\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n  100: 				\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"spell_targeting_result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n  101  			],\\\\\\\\\\\\\\\\n  102  			[\\\\\\\\\\\\\\\\n  ...\\\\\\\\\\\\\\\\n 1056  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"spell_t\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1057  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targeting_item\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1058: 			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1059  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"action_free = False\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1060  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"game_state = GameStates.PLAYERS_TURN\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n ....\\\\\\\\\\\\\\\\n 1105  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"missile_targ\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1106  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1107: 			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1108  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"game_state = GameStates.TARGETING\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1109  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"action_free\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1110  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targeting_item\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1111: 			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1112  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1113  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"handle_de\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n ....\\\\\\\\\\\\\\\\n 1122  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"con\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1123  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"targeting\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1124: 			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"spell_targeting\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1125  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"spell_tar\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n 1126  			\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"spell_targ\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\results_process_system.py:\\\\\\\\\\\\\\\\n   14  		item_dropped = player_turn_result.get('item_dropped')\\\\\\\\\\\\\\\\n   15  		targeting = player_turn_result.get('targeting')\\\\\\\\\\\\\\\\n   16: 		spell_targeting_result = player_turn_result.get('spell_targeting')\\\\\\\\\\\\\\\\n   17  		targeting_cancelled = player_turn_result.get('targeting_cancelled')\\\\\\\\\\\\\\\\n   18  		equip = player_turn_result.get('equip')\\\\\\\\\\\\\\\\n   ..\\\\\\\\\\\\\\\\n   40  			targets.current_targeting_consumable = targeting\\\\\\\\\\\\\\\\n   41  			message_log.add_message(targets.current_targeting_consumable.consumable.targeting_message)\\\\\\\\\\\\\\\\n   42: 		if spell_targeting_result:\\\\\\\\\\\\\\\\n   43  			print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"result process system picked up the spell targeting result\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n   44  			previous_game_state = GameStates.PLAYERS_TURN\\\\\\\\\\\\\\\\n   45  			game_state = GameStates.TARGETING\\\\\\\\\\\\\\\\n   46: 			targets.current_targeting_spell = spell_targeting_result\\\\\\\\\\\\\\\\n   47  			message_log.add_message(targets.current_targeting_spell.targeting_message)\\\\\\\\\\\\\\\\n   48  		if missile_targeting:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\spell_system.py:\\\\\\\\\\\\\\\\n   24  \\\\\\\\\\\\\\\\n   25  	if spell.targeting and not (kwargs.get('target_x') or kwargs.get('target_y')):\\\\\\\\\\\\\\\\n   26: 		print(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"spell system is returning spell_targeting\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n   27: 		results.append({'spell_targeting': spell})\\\\\\\\\\\\\\\\n   28  	else:\\\\\\\\\\\\\\\\n   29  		kwargs = {**spell.function_kwargs, **kwargs}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n11 matches across 3 files\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"stamina\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\components\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\stats.py:\\\\\\\\\\\\\\\\n    1  class Stats:\\\\\\\\\\\\\\\\n    2: 	def __init__(self, Strength=10, Precision=10, Agility=10, Intellect=10, Willpower=10, Stamina=10, Endurance=10):\\\\\\\\\\\\\\\\n    3  		self.Strength = Strength\\\\\\\\\\\\\\\\n    4  		self.Precision = Precision\\\\\\\\\\\\\\\\n    .\\\\\\\\\\\\\\\\n    6  		self.Intellect = Intellect\\\\\\\\\\\\\\\\n    7  		self.Willpower = Willpower\\\\\\\\\\\\\\\\n    8: 		self.Stamina = Stamina\\\\\\\\\\\\\\\\n    9  		self.Endurance = Endurance\\\\\\\\\\\\\\\\n   10: 		self.base_max_hp = self.Stamina + self.Endurance\\\\\\\\\\\\\\\\n   11  		self.hp = self.base_max_hp\\\\\\\\\\\\\\\\n   12  		self.evade = int((self.Agility + self.Precision) / 4)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\feats.py:\\\\\\\\\\\\\\\\n    1  class Feat:\\\\\\\\\\\\\\\\n    2: 	def __init__(self, name, display_name, parent_skill, minimum_rank, stamina_cost, use_function, targeting, targeting_message, feat_range, **kwargs):\\\\\\\\\\\\\\\\n    3  		self.name = name\\\\\\\\\\\\\\\\n    4  		self.display_name = display_name\\\\\\\\\\\\\\\\n    5  		self.parent_skill = parent_skill\\\\\\\\\\\\\\\\n    6  		self.minimum_rank = minimum_rank\\\\\\\\\\\\\\\\n    7: 		self.stamina_cost = stamina_cost\\\\\\\\\\\\\\\\n    8  		self.use_function = use_function\\\\\\\\\\\\\\\\n    9  		self.targeting = targeting\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\loader_functions\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\initialize_new_game.py:\\\\\\\\\\\\\\\\n   72  	defender_component = Defender()\\\\\\\\\\\\\\\\n   73  	performer_component = Performer()\\\\\\\\\\\\\\\\n   74: 	stats_component = Stats(Strength=14, Precision=14, Agility=14, Intellect=14, Willpower=14, Stamina=14, Endurance=14)\\\\\\\\\\\\\\\\n   75  	skills_component = Skills()\\\\\\\\\\\\\\\\n   76  	skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\mocks.py:\\\\\\\\\\\\\\\\n   20  	test_identified = Identified()\\\\\\\\\\\\\\\\n   21  	test_inventory = Inventory(10)\\\\\\\\\\\\\\\\n   22: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n   23  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", inventory=test_inventory, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, identified=test_identified)\\\\\\\\\\\\\\\\n   24  	return test_entity\\\\\\\\\\\\\\\\n   ..\\\\\\\\\\\\\\\\n   29  	test_skills_component = Skills()\\\\\\\\\\\\\\\\n   30  	test_equipment_component = Equipment()\\\\\\\\\\\\\\\\n   31: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n   32  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\\\\\\\\\n   33  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\\\\\\\\\n   ..\\\\\\\\\\\\\\\\n   44  	test_fighter = Fighter()\\\\\\\\\\\\\\\\n   45  	test_name = Name(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Mock\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\\n   46: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n   47  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter, name=test_name)	\\\\\\\\\\\\\\\\n   48  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\\\\\\\\\n   ..\\\\\\\\\\\\\\\\n   57  	test_sword = EquippableFactory.make_longsword()\\\\\\\\\\\\\\\\n   58  	test_equipment_component.main_hand = test_sword	\\\\\\\\\\\\\\\\n   59: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n   60  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\\\\\\\\\n   61  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\\\\\\\\\\\\\n   ..\\\\\\\\\\\\\\\\n   72  	test_equipment_component.main_hand = test_sword\\\\\\\\\\\\\\\\n   73  	test_equipment_component.off_hand = test_shield	\\\\\\\\\\\\\\\\n   74: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n   75  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\\\\\\\\\\\\\n   76  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\\\\\\\\\n   ..\\\\\\\\\\\\\\\\n   87  	test_equipment_component.main_hand = test_sword\\\\\\\\\\\\\\\\n   88  	test_equipment_component.off_hand = test_shield\\\\\\\\\\\\\\\\n   89: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n   90  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\\\\\\\\\n   91  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\\\\\\\\\n   ..\\\\\\\\\\\\\\\\n  101  	test_sword = EquippableFactory.make_longsword()\\\\\\\\\\\\\\\\n  102  	test_equipment_component.main_hand = test_sword\\\\\\\\\\\\\\\\n  103: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n  104  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\\\\\\\\\n  105  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\\\\\\\\\\\\\n  ...\\\\\\\\\\\\\\\\n  117  	test_equipment_component.main_hand = test_sword\\\\\\\\\\\\\\\\n  118  	test_equipment_component.off_hand = test_shield	\\\\\\\\\\\\\\\\n  119: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n  120  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component, fighter=test_fighter_component)\\\\\\\\\\\\\\\\n  121  	test_skills_component.set_skill_rank(SkillNames.SWORD, 14)\\\\\\\\\\\\\\\\n  ...\\\\\\\\\\\\\\\\n  130  	test_bow = EquippableFactory.make_shortbow()\\\\\\\\\\\\\\\\n  131  	test_equipment_component.main_hand = test_bow\\\\\\\\\\\\\\\\n  132: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n  133  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\\\\\\\\\n  134  	return test_entity\\\\\\\\\\\\\\\\n  ...\\\\\\\\\\\\\\\\n  144  	test_equipment_component.main_hand = test_bow\\\\\\\\\\\\\\\\n  145  	test_equipment_component.ammunition = test_arrows\\\\\\\\\\\\\\\\n  146: 	test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n  147  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", fighter=test_fighter, skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\\\\\\\\\n  148  	return test_entity\\\\\\\\\\\\\\\\n  ...\\\\\\\\\\\\\\\\n  157  	test_equipment_component.main_hand = test_sword\\\\\\\\\\\\\\\\n  158  	test_equipment_component.off_hand = test_shield	\\\\\\\\\\\\\\\\n  159: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=14, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n  160  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component, defender=test_defender_component)	\\\\\\\\\\\\\\\\n  161  	test_skills_component.set_skill_rank(SkillNames.SWORD, 1)\\\\\\\\\\\\\\\\n  ...\\\\\\\\\\\\\\\\n  167  	test_skills_component = Skills()\\\\\\\\\\\\\\\\n  168  	test_equipment_component = Equipment()\\\\\\\\\\\\\\\\n  169: 	test_stats_component = Stats(Strength=14, Precision=11, Agility=13	, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n  170  	test_entity = Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", skills=test_skills_component, equipment=test_equipment_component, stats=test_stats_component)\\\\\\\\\\\\\\\\n  171  	test_skills_component.set_skill_rank(SkillNames.UNARMED, 1)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\monsters.py:\\\\\\\\\\\\\\\\n   19  def makeOrc(x, y):\\\\\\\\\\\\\\\\n   20  	fighter_component = Fighter(xp=35)\\\\\\\\\\\\\\\\n   21: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n   22  	ai_component = BasicMonster()\\\\\\\\\\\\\\\\n   23  	equipment_component = Equipment()\\\\\\\\\\\\\\\\n   ..\\\\\\\\\\\\\\\\n   40  def makeTroll(x, y):\\\\\\\\\\\\\\\\n   41  	fighter_component = Fighter(xp=100)\\\\\\\\\\\\\\\\n   42: 	stats_component = Stats(Strength=12, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n   43  	ai_component = BasicMonster()\\\\\\\\\\\\\\\\n   44  	equipment_component = Equipment()\\\\\\\\\\\\\\\\n   ..\\\\\\\\\\\\\\\\n   58  def makeKobold(x, y):\\\\\\\\\\\\\\\\n   59  	fighter_component = Fighter(xp=30)\\\\\\\\\\\\\\\\n   60: 	stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n   61  	ai_component = BasicMonster()\\\\\\\\\\\\\\\\n   62  	equipment_component = Equipment()\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\rltests.py:\\\\\\\\\\\\\\\\n  115  		test_caster = Caster(spells=[], max_mana=50)\\\\\\\\\\\\\\\\n  116  		test_fighter = Fighter(xp=100)\\\\\\\\\\\\\\\\n  117: 		test_stats = Stats(Strength=1, Precision=1, Agility=1, Intellect=1, Willpower=1, Stamina=1, Endurance=1)\\\\\\\\\\\\\\\\n  118  		test_skills = Skills()\\\\\\\\\\\\\\\\n  119  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", caster=test_caster, fighter=test_fighter, skills=test_skills, stats=test_stats)\\\\\\\\\\\\\\\\n  ...\\\\\\\\\\\\\\\\n  180  class StatsTests(unittest.TestCase):\\\\\\\\\\\\\\\\n  181  	def test_can_create_entity_with_stats(self):\\\\\\\\\\\\\\\\n  182: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n  183  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", stats=test_stats_component)\\\\\\\\\\\\\\\\n  184  		self.assertEqual(test_entity.stats, test_stats_component)\\\\\\\\\\\\\\\\n  185  \\\\\\\\\\\\\\\\n  186  	def test_can_calculate_hp(self):\\\\\\\\\\\\\\\\n  187: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n  188  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Player\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", stats=test_stats_component)\\\\\\\\\\\\\\\\n  189  		self.assertEqual(test_entity.stats.max_hp, 19)\\\\\\\\\\\\\\\\n  ...\\\\\\\\\\\\\\\\n  219  \\\\\\\\\\\\\\\\n  220  	def test_can_get_damage_string(self):\\\\\\\\\\\\\\\\n  221: 		test_stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n  222  		test_fighter_component = Fighter(xp=10)\\\\\\\\\\\\\\\\n  223  		test_equipment = Equipment()\\\\\\\\\\\\\\\\n  ...\\\\\\\\\\\\\\\\n  645  	def test_damage_over_time_effects_work(self):\\\\\\\\\\\\\\\\n  646  		fighter_component = Fighter(xp=100)\\\\\\\\\\\\\\\\n  647: 		stats_component = Stats(Strength=9, Precision=11, Agility=12, Intellect=10, Willpower=9, Stamina=10, Endurance=9)\\\\\\\\\\\\\\\\n  648  		test_entity = entity.Entity(1, 1, 'A', libtcod.white, stats=stats_component, fighter=fighter_component)\\\\\\\\\\\\\\\\n  649  		test_effect = Effect(name=EffectNames.POISON, description=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Poisoned\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", turns_left=5, damage_per_turn=3)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\\\\\\\\\n   17  	results = []\\\\\\\\\\\\\\\\n   18  \\\\\\\\\\\\\\\\n   19: 	if feat.stamina_cost > entity.stats.stamina:\\\\\\\\\\\\\\\\n   20: 		results.append({'message': Message(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"You don't have enough stamina to perform that feat.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")})\\\\\\\\\\\\\\\\n   21  		return results\\\\\\\\\\\\\\\\n   22  \\\\\\\\\\\\\\\\n   ..\\\\\\\\\\\\\\\\n   26  	else:\\\\\\\\\\\\\\\\n   27  		kwargs = {**feat.function_kwargs, **kwargs}\\\\\\\\\\\\\\\\n   28: 		entity.stats.stamina -= feat.stamina_cost\\\\\\\\\\\\\\\\n   29  		feat_perform_results = feat.use_function(entity, **kwargs)\\\\\\\\\\\\\\\\n   30  \\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\skill_manager.py:\\\\\\\\\\\\\\\\n   35  		return entity.stats.Willpower or 0\\\\\\\\\\\\\\\\n   36  \\\\\\\\\\\\\\\\n   37: def get_stamina(entity):\\\\\\\\\\\\\\\\n   38  	if entity.stats:\\\\\\\\\\\\\\\\n   39: 		return entity.stats.Stamina or 0\\\\\\\\\\\\\\\\n   40  \\\\\\\\\\\\\\\\n   41  def get_endurance(entity):\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n35 matches across 8 files\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"feat_perform_re\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\\\\\\\\\n   32  		kwargs = {**feat.function_kwargs, **kwargs}\\\\\\\\\\\\\\\\n   33  		entity.stats.sp -= feat.stamina_cost\\\\\\\\\\\\\\\\n   34: 		feat_perform_results = feat.use_function(entity, **kwargs)\\\\\\\\\\\\\\\\n   35  \\\\\\\\\\\\\\\\n   36: 		results.extend(feat_perform_results)\\\\\\\\\\\\\\\\n   37  		results.append({'performed': spell.name})\\\\\\\\\\\\\\\\n   38  	return results\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\input_process_system.py:\\\\\\\\\\\\\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\\\\\\\\\\\\\n  158  			elif targets.current_targeting_missile:\\\\\\\\\\\\\\\\n  159: 				feat_perform_results = player.fighter.fire_weapon(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\\\\\\\\\\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\\\\\\\\\\\\\n  161  			action_free = False\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n3 matches across 2 files\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"perform(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\\\\\\\\\n   16  	return feat\\\\\\\\\\\\\\\\n   17  \\\\\\\\\\\\\\\\n   18: def perform(entity, feat, **kwargs):\\\\\\\\\\\\\\\\n   19  	results = []\\\\\\\\\\\\\\\\n   20  	target_x = kwargs.get('target_x')\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\input_process_system.py:\\\\\\\\\\\\\\\\n  126  		feat = player.performer.feat_list[feat_index]\\\\\\\\\\\\\\\\n  127  		print(feat_index)\\\\\\\\\\\\\\\\n  128: 		player_turn_results.extend(perform(player, feat, entities=entities, fov_map=fov_map))\\\\\\\\\\\\\\\\n  129  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\\\\\\\\\\\\\\\n  130  		for result in player_turn_results:\\\\\\\\\\\\\\\\n  ...\\\\\\\\\\\\\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\\\\\\\\\\\\\n  158  			elif targets.current_targeting_missile:\\\\\\\\\\\\\\\\n  159: 				feat_perform_results = perform(weapon=player.equipment.main_hand.equippable, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\\\\\\\\\\\\\n  160  				player_turn_results.extend(missile_attack_results)	\\\\\\\\\\\\\\\\n  161  			action_free = False\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n3 matches across 2 files\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nSearching 75 files for \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"current_targeting_fe\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\results_process_system.py:\\\\\\\\\\\\\\\\n   51  			previous_game_state = GameStates.PLAYERS_TURN\\\\\\\\\\\\\\\\n   52  			game_state = GameStates.TARGETING\\\\\\\\\\\\\\\\n   53: 			targets.current_targeting_feat = feat_targeting\\\\\\\\\\\\\\\\n   54: 			message_log.add_message(targets.current_targeting_feat.targeting_message)\\\\\\\\\\\\\\\\n   55  		if missile_targeting:\\\\\\\\\\\\\\\\n   56  			previous_game_state = GameStates.PLAYERS_TURN\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nC:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\targeting.py:\\\\\\\\\\\\\\\\n    4  		self.current_targeting_spell = None\\\\\\\\\\\\\\\\n    5  		self.current_targeting_missile = False\\\\\\\\\\\\\\\\n    6: 		self.current_targeting_feat = None\\\\\\\\\\\\\\\\n    7  \\\\\\\\\\\\\\\\n    8  	def __str__(self):\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n3 matches across 2 files\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\",\\\\\\\\n  580  			\\\\\\\\\\\\\\\"settings\\\\\\\\\\\\\\\":\\\\\\\\n  581  			{\\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\feat_system.py:\\\\\\\\n   39  \\\\\\\\n   40  		results.extend(feat_perform_results)\\\\\\\\n   41: 		results.append({'performed': feat.name})\\\\\\\\n   42  	return results\\\\\\\\n   43  \\\\\\\\n\\\\\\\\nC:\\\\\\\\\\\\\\\\dev\\\\\\\\\\\\\\\\p3roguelike\\\\\\\\\\\\\\\\systems\\\\\\\\\\\\\\\\input_process_system.py:\\\\\\\\n  128  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\\\\\\\n  129  		for result in player_turn_results:\\\\\\\\n  130: 			if result.get('performed'):\\\\\\\\n  131  				print(\\\\\\\\\\\\\\\"used action via feat\\\\\\\\\\\\\\\")\\\\\\\\n  132  				action_free = False		\\\\\\\\n\\\\\\\\n3 matches across 3 files\\\\\\\\n\\\\\\\",\\\\n  564  			\\\\\\\"settings\\\\\\\":\\\\n  565  			{\\\\n  ...\\\\n 1031  			\\\\\\\"performed\\\\\\\",\\\\n 1032  			\\\\\\\"current_targeting_fe\\\\\\\",\\\\n 1033: 			\\\\\\\"perform(\\\\\\\",\\\\n 1034  			\\\\\\\"feat_perform_re\\\\\\\",\\\\n 1035  			\\\\\\\"stamina\\\\\\\",\\\\n\\\\nC:\\\\\\\\dev\\\\\\\\p3roguelike\\\\\\\\systems\\\\\\\\input_process_system.py:\\\\n  125  	if feat_index is not None and feat_index < len(player.performer.feat_list):\\\\n  126  		feat = player.performer.feat_list[feat_index]\\\\n  127: 		player_turn_results.extend(perform(player, feat, entities=entities, fov_map=fov_map))\\\\n  128  		# TODO: This is not at all great - analysing player turn results should happen in result process system!\\\\n  129  		for result in player_turn_results:\\\\n  ...\\\\n  157  				player_turn_results.extend(missile_attack_results)	\\\\n  158  			elif targets.current_targeting_feat:\\\\n  159: 				feat_perform_results = perform(player, targets.current_targeting_feat, entities=entities, fov_map=fov_map, target_x=target_x, target_y=target_y)\\\\n  160  				player_turn_results.extend(feat_perform_results)\\\\n  161  				for result in player_turn_results:\\\\n\\\\n7 matches across 2 files\\\\n\\\",\\n  564  			\\\"settings\\\":\\n  565  			{\\n\\nC:\\\\dev\\\\p3roguelike\\\\systems\\\\input_process_system.py:\\n  129  		for result in player_turn_results:\\n  130  			if result.get('performed'):\\n  131: 				print(\\\"used action via feat\\\")\\n  132  				action_free = False		\\n  133  \\n\\n3 matches across 2 files\\n\",\n  564  			\"settings\":\n  565  			{\n  ...\n 1029  		\"find_history\":\n 1030  		[\n 1031: 			\"used action via\",\n 1032  			\"perform\",\n 1033  			\"perform(\",\n\nC:\\dev\\p3roguelike\\systems\\input_process_system.py:\n  132  		for result in player_turn_results:\n  133  			if result.get('performed'):\n  134: 				print(\"used action via feat\")\n  135  				action_free = False		\n  136  \n\n8 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 159913,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "components/stats.py",
			"settings":
			{
				"buffer_size": 824,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/results_process_system.py",
			"settings":
			{
				"buffer_size": 4627,
				"line_ending": "Windows"
			}
		},
		{
			"file": "map_objects/game_map.py",
			"settings":
			{
				"buffer_size": 7701,
				"line_ending": "Windows"
			}
		},
		{
			"file": "input_handlers.py",
			"settings":
			{
				"buffer_size": 4960,
				"line_ending": "Windows"
			}
		},
		{
			"file": "game_states.py",
			"settings":
			{
				"buffer_size": 332,
				"line_ending": "Windows"
			}
		},
		{
			"file": "render_functions.py",
			"settings":
			{
				"buffer_size": 6155,
				"line_ending": "Windows"
			}
		},
		{
			"file": "menus.py",
			"settings":
			{
				"buffer_size": 7329,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/move_system.py",
			"settings":
			{
				"buffer_size": 3938,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/ai.py",
			"settings":
			{
				"buffer_size": 2653,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/damage.py",
			"settings":
			{
				"buffer_size": 4404,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/attack.py",
			"settings":
			{
				"buffer_size": 4882,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/fighter.py",
			"settings":
			{
				"buffer_size": 2715,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/defender.py",
			"settings":
			{
				"buffer_size": 2180,
				"line_ending": "Windows"
			}
		},
		{
			"file": "mocks.py",
			"settings":
			{
				"buffer_size": 9667,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/effects.py",
			"settings":
			{
				"buffer_size": 347,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/effects_manager.py",
			"settings":
			{
				"buffer_size": 1379,
				"line_ending": "Windows"
			}
		},
		{
			"file": "spells.py",
			"settings":
			{
				"buffer_size": 349,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/caster.py",
			"settings":
			{
				"buffer_size": 153,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/spell_system.py",
			"settings":
			{
				"buffer_size": 1450,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/skill_manager.py",
			"settings":
			{
				"buffer_size": 1694,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/skills.py",
			"settings":
			{
				"buffer_size": 736,
				"line_ending": "Windows"
			}
		},
		{
			"file": "rltests.py",
			"settings":
			{
				"buffer_size": 37665,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/feat_system.py",
			"settings":
			{
				"buffer_size": 3097,
				"line_ending": "Windows"
			}
		},
		{
			"file": "feats.py",
			"settings":
			{
				"buffer_size": 491,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/performer.py",
			"settings":
			{
				"buffer_size": 90,
				"line_ending": "Windows"
			}
		},
		{
			"file": "targeting.py",
			"settings":
			{
				"buffer_size": 321,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/pickup_system.py",
			"settings":
			{
				"buffer_size": 386,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/inventory.py",
			"settings":
			{
				"buffer_size": 3500,
				"line_ending": "Windows"
			}
		},
		{
			"file": "generators.py",
			"settings":
			{
				"buffer_size": 1008,
				"line_ending": "Windows"
			}
		},
		{
			"file": "item_factory.py",
			"settings":
			{
				"buffer_size": 4312,
				"line_ending": "Windows"
			}
		},
		{
			"file": "item_functions.py",
			"settings":
			{
				"buffer_size": 6250,
				"line_ending": "Windows"
			}
		},
		{
			"file": "monsters.py",
			"settings":
			{
				"buffer_size": 3629,
				"line_ending": "Windows"
			}
		},
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 26,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/item.py",
			"settings":
			{
				"buffer_size": 104,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "P5Jw8CykYmrcXN8FSRYAp7LCWC2b22KDePfcpxhC9rGHSSpDk5ji",
			"file": "/C/Users/Leon/Documents/steem",
			"file_size": 52,
			"file_write_time": 131955983293219548,
			"settings":
			{
				"buffer_size": 52,
				"line_ending": "Windows",
				"name": "P5Jw8CykYmrcXN8FSRYAp7LCWC2b22KDePfcpxhC9rGHSSpDk5"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 392.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/dev/p3roguelike/.git/COMMIT_EDITMSG",
		"/C/dev/p3roguelike/components/meleeweapon.py",
		"/C/dev/p3roguelike/components/missileweapon.py",
		"/C/dev/p3roguelike/components/equipment.py",
		"/C/dev/p3roguelike/components/equippable.py",
		"/C/dev/p3roguelike/attack_types.py",
		"/C/dev/p3roguelike/components/identified.py",
		"/C/dev/p3roguelike/death_functions.py",
		"/C/dev/p3roguelike/components/ammunition.py",
		"/C/dev/p3roguelike/equipment_slots.py",
		"/C/dev/p3roguelike/systems/name_system.py",
		"/C/dev/p3roguelike/random_utils.py",
		"/C/dev/p3roguelike/components/feats.py",
		"/C/dev/p3rl-copy/engine.py",
		"/C/dev/microblog/microblog.py",
		"/C/dev/microblog/app/templates/index.html",
		"/C/dev/microblog/app/templates/base.html",
		"/C/dev/microblog/app/routes.py",
		"/C/dev/microblog/.flaskenv",
		"/C/dev/microblog/app/__init__.py",
		"/C/dev/microblog/config.py",
		"/C/dev/microblog/app/forms.py",
		"/C/dev/p3roguelike/components/effects.py",
		"/C/dev/p3roguelike/map_objects/game_map.py",
		"/C/dev/p3roguelike/components/stats.py",
		"/C/dev/p3roguelike/systems/skill_manager.py",
		"/C/dev/str.py",
		"/C/dev/p3roguelike - Copy/systems/move_system.py",
		"/C/dev/ClonedRL/atrl-master/main.py",
		"/C/dev/p3roguelike/damage_types.py",
		"/C/dev/p3roguelike/spells.py",
		"/C/dev/p3roguelike/game_states.py",
		"/C/dev/p3roguelike/components/name.py",
		"/C/dev/p3roguelike/systems/effects_manager.py",
		"/C/dev/p3rl-copy/components/fighter.py",
		"/C/dev/p3roguelike - Copy/systems/input_process_system.py",
		"/C/dev/p3rl-copy/systems/results_process_system.py",
		"/C/dev/p3roguelike-base/engine.py",
		"/C/dev/ClonedRL/atrl-master/game/loader_functions/tiles.py",
		"/C/dev/p3roguelike/components/ai.py",
		"/C/dev/ClonedRL/atrl-master/game/render_functions.py",
		"/C/dev/ClonedRL/atrl-master/game/death_functions.py",
		"/C/dev/ClonedRL/atrl-master/game/entity.py",
		"/C/dev/ClonedRL/atrl-master/game/map_objects/game_map.py",
		"/C/dev/ClonedRL/atrl-master/game/loader_functions/initialize_new_game.py",
		"/C/dev/p3roguelike/systems/pickup_system.py",
		"/C/dev/p3roguelike/input_process_system.py",
		"/C/dev/p3roguelike/systems/pickup_system",
		"/C/dev/p3roguelike/systems/move_system.py",
		"/C/dev/p3roguelike/components/inventory.py",
		"/C/dev/ClonedRL/atrl-master/game/menus.py",
		"/C/dev/p3roguelike/components/consumable.py",
		"/C/dev/p3roguelike/mocks.py",
		"/C/dev/p3roguelike/render_functions.py",
		"/C/dev/p3roguelike/loader_functions/tile_codes.py",
		"/C/dev/jsrl/jsrl.html",
		"/C/dev/p3roguelike/main.py",
		"/C/dev/p3roguelike/systems/attack.py",
		"/C/dev/p3roguelike/potion_test.py",
		"/C/dev/p3roguelike/entity.py",
		"/C/dev/p3roguelike/systems/time_system.py",
		"/C/dev/p3roguelike/components/defender.py",
		"/C/dev/p3roguelike/components/skills.py",
		"/C/dev/p3roguelike/menu_options.py",
		"/C/dev/p3roguelike/loader_functions/data_loaders.py",
		"/C/dev/p3roguelike/generators.py",
		"/C/dev/p3roguelike/input_handlers.py",
		"/C/dev/p3roguelike/game_messages.py",
		"/C/dev/p3roguelike/dlevel.py",
		"/C/dev/p3roguelike/components/stairs.py",
		"/C/workspace/pingpong/index.html",
		"/C/dev/p3roguelike/identified.py",
		"/C/dev/property.py",
		"/C/dev/p3roguelike/components/level.py",
		"/C/dev/p3roguelike/fov_functions.py",
		"/C/dev/p3roguelike/loader_functions/skill_book.py",
		"/C/dev/p3roguelike/components/caster.py",
		"/C/dev/p3roguelike/rltests.py",
		"/C/dev/p3roguelike/rltests2.py",
		"/C/dev/test.py",
		"/C/dev/p3roguelike/components/fighter.py",
		"/C/dev/p3roguelike-base/components/fighter.py",
		"/C/dev/p3roguelike/monsters",
		"/C/dev/animal.html",
		"/C/dev/rock.html",
		"/C/dev/pong/pong3.html",
		"/C/dev/p3roguelike/map_objects/rectangle.py",
		"/C/dev/p3roguelike/engine.py",
		"/C/dev/p3roguelike-base/map_objects/game_map.py",
		"/C/dev/p3roguelike/loader_functions/initialize_new_game.py",
		"/C/dev/p3roguelike/map_objects/tile.py",
		"/C/dev/p3roguelike/components/level",
		"/C/workspace/pingpong/js/pingpong.js",
		"/C/dev/simple.py",
		"/C/dev/p3roguelike/components/__init__.py",
		"/C/workspace/pingpong/css/pingpong.css",
		"/C/Users/Leon/AppData/Local/Programs/Python/Python36-32/Lib/site-packages/linkedin/server.py",
		"/C/workspace/linkedin/posts.txt",
		"/C/workspace/linkedin/linkedinapp3.py",
		"/C/workspace/linkedin/linkedinapp.py",
		"/C/dev/p3roguelike/map_objects/__init__.py",
		"/C/workspace/linkedin/Best supplements to naturally boost testosterone",
		"/C/Users/Leon/Documents/Emoji/Emoji",
		"/C/workspace/round.py",
		"/C/dev/tweeter/newTweeterEU.py",
		"/C/Users/Leon/Documents/Business/SurveyAspirations",
		"/C/dev/tweeter/tracker.py",
		"/C/workspace/tweetbot/blogTweets.txt",
		"/C/workspace/tweetbot/articleTweets.txt",
		"/C/dev/linkstrip/linkstrip/sourcelinks.txt",
		"/C/dev/linkstrip/linkstrip/targetlinks.txt",
		"/C/Users/Leon/AppData/Local/Temp/Temp1_rltut03.zip/rl tut 03/src/rltut/WorldBuilder.java",
		"/C/Users/Leon/AppData/Local/Temp/Temp1_rltut03 (1).zip/rl tut 03/src/rltut/screens/PlayScreen.java",
		"/C/Users/Leon/AppData/Local/Temp/Temp1_rltut03 (1).zip/rl tut 03/src/rltut/Tile.java",
		"/C/workspace/pygame/game2.py",
		"/C/workspace/pygame/game1.py",
		"/C/workspace/RLtdl/input_handlers.py",
		"/C/workspace/RLtdl/render_functions.py",
		"/C/workspace/RLtdl/components/ai.py",
		"/C/workspace/RLtdl/components/fighter.py",
		"/C/workspace/RLtdl/map_utils.py",
		"/C/Users/Leon/Documents/Suncorp",
		"/C/workspace/RLtdl/entity.py",
		"/C/workspace/RLtdl/game_states.py",
		"/C/Users/Leon/Documents/pport",
		"/C/workspace/RLtdl/engine.py",
		"/C/dev/pong/pong.html",
		"/C/dev/pong/pong2.html"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"C:\\dev\\p3roguelike",
			"<open files>,C:\\dev\\p3roguelike",
			"<open files>",
			"C:\\Users\\Leon\\Downloads\\rltut09\\rl tut 09\\src\\rltut",
			"C:\\Users\\Leon\\AppData\\Local\\Temp\\Temp1_rltut09.zip\\rl tut 09\\src\\rltut"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"print",
			"used action via",
			"perform",
			"perform(",
			"performed",
			"current_targeting_fe",
			"perform(",
			"feat_perform_re",
			"stamina",
			"feat",
			"spell_targeting",
			"spells_menu",
			"ENEMY_TURN",
			"spell_func",
			"TODO",
			"cast(",
			"todo",
			"Effect(",
			"turns_left",
			"poison",
			"assign_po",
			"make_ble",
			")\n",
			"POISON",
			"effects",
			"confusion",
			"EffectNames",
			"effect",
			"TODO",
			"item-added",
			"inventoryt",
			"TODO",
			"print(",
			"TODO",
			"get_equipped",
			"equipment",
			"show_equipment_sc",
			"TODO",
			"make_dropped",
			"make_dropp",
			"TODO",
			"missile_dropped",
			"currently",
			"attack_miss",
			"print(",
			"load(",
			"load",
			"\"s\"",
			"of stuff",
			"ammunition",
			"arrows",
			"get_weapon_sk",
			"quanti",
			"missile_damage_b",
			"weaponcateg",
			"TODO",
			"exit",
			"potion_index",
			"potion_ind",
			"POTION_SC",
			"print(",
			"currently_targeting_cons",
			"spell_tar",
			"spell_t",
			"targeting_item",
			"spell_targeting",
			"action_free = False",
			"game_state = GameStates.PLAYERS_TURN",
			"game_state =",
			"fire_weapon",
			"fired_weapon",
			"self",
			"get_current_missile",
			"self",
			"damage_mess",
			"weapon",
			"TODO",
			"get_current_melee",
			"damage",
			"missile",
			"missile_dam",
			"get_basic",
			"resolve_h",
			"resolve_hit",
			"get_current_mel",
			"get_current_m",
			"melee_damage_bonus",
			"dice_roll",
			"dice",
			"dice_r",
			"d6_d6_dice_roll",
			"dice_roll",
			"TODO",
			"heal(",
			"roll",
			"dice",
			"TODO",
			"print(",
			"Searching",
			"print(",
			"damage_modif",
			"hit_modif",
			"print(",
			"returning from",
			"learn_spell",
			"you learned",
			"toggle_mai",
			"targeting",
			"kill",
			"add_ite",
			"you pick up the",
			"player_turn_results.extend(time_system.process_entity_turn(player))",
			"missile_targ",
			"print(",
			"spell_targeting",
			"game_state = GameStates.TARGETING",
			"action_free",
			"targeting_item",
			"spell_targeting",
			":\n",
			"handle_de",
			"message_log",
			"con",
			"constants",
			"is dead!",
			"gets burned",
			"spell_targ",
			"({'targeting'"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"melee_damage",
			"d6_dice_roll",
			"action_free = False",
			"entity",
			"SkillNames.SHIELD",
			"SkillNames.SWORD",
			"entity.fighter.effect_list",
			"make_longsword",
			"make_shortbow",
			"make_longsword",
			"scroll",
			"hit_modifier",
			"damage_modifier",
			"move_system",
			"target.name",
			"true_name",
			"make_heal_book",
			"make_fireball_book",
			"make_confusion_scroll",
			"make_lightning_scroll",
			"make_fireball_scroll",
			"make_poison_potion",
			"make_sword",
			"make_bolts",
			"make_sword",
			"make_leather_armor",
			"make_dagger",
			"make_crossbow",
			"make_bow",
			"make_shield",
			"make_arrows",
			"set_skill_rank",
			"set_skill",
			"get_skill",
			"set_skill",
			"evade",
			"PIERCING",
			"SLASHING",
			"missile",
			"dice_roll",
			"get_block",
			"get_dodge",
			"get_parry",
			"self.owner.stats",
			"PD",
			"",
			" Testosterone ",
			"Testosterone",
			"",
			"    ",
			"https://www.extremeuncertainty.com",
			"",
			"hair",
			"teeth",
			"eyes",
			"weight",
			"height",
			"age",
			"name"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 28,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "loader_functions/constants.py",
					"settings":
					{
						"buffer_size": 2585,
						"regions":
						{
						},
						"selection":
						[
							[
								2361,
								2361
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 420.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "loader_functions/initialize_new_game.py",
					"settings":
					{
						"buffer_size": 5307,
						"regions":
						{
						},
						"selection":
						[
							[
								454,
								454
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "entity.py",
					"settings":
					{
						"buffer_size": 2145,
						"regions":
						{
						},
						"selection":
						[
							[
								1971,
								1971
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 210.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "engine.py",
					"settings":
					{
						"buffer_size": 5759,
						"regions":
						{
						},
						"selection":
						[
							[
								4978,
								4978
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 966.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "systems/input_process_system.py",
					"settings":
					{
						"buffer_size": 8104,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"settings":
					{
						"buffer_size": 159913,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										14720,
										14729
									],
									[
										17141,
										17150
									],
									[
										17432,
										17441
									],
									[
										33547,
										33555
									],
									[
										33665,
										33673
									],
									[
										33958,
										33966
									],
									[
										34340,
										34348
									],
									[
										36036,
										36044
									],
									[
										36325,
										36333
									],
									[
										36692,
										36700
									],
									[
										55246,
										55261
									],
									[
										75029,
										75044
									],
									[
										76374,
										76389
									],
									[
										94764,
										94779
									],
									[
										114547,
										114562
									],
									[
										115731,
										115746
									],
									[
										135405,
										135420
									],
									[
										157993,
										158008
									],
									[
										159423,
										159438
									],
									[
										159609,
										159624
									],
									[
										159823,
										159838
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								76466,
								76466
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 12695.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "components/stats.py",
					"settings":
					{
						"buffer_size": 824,
						"regions":
						{
						},
						"selection":
						[
							[
								509,
								509
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "systems/results_process_system.py",
					"settings":
					{
						"buffer_size": 4627,
						"regions":
						{
						},
						"selection":
						[
							[
								2517,
								2517
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 252.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "map_objects/game_map.py",
					"settings":
					{
						"buffer_size": 7701,
						"regions":
						{
						},
						"selection":
						[
							[
								6004,
								6004
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1653.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "input_handlers.py",
					"settings":
					{
						"buffer_size": 4960,
						"regions":
						{
						},
						"selection":
						[
							[
								4798,
								4798
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1974.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "game_states.py",
					"settings":
					{
						"buffer_size": 332,
						"regions":
						{
						},
						"selection":
						[
							[
								332,
								332
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "render_functions.py",
					"settings":
					{
						"buffer_size": 6155,
						"regions":
						{
						},
						"selection":
						[
							[
								199,
								199
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "menus.py",
					"settings":
					{
						"buffer_size": 7329,
						"regions":
						{
						},
						"selection":
						[
							[
								1309,
								1309
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "systems/move_system.py",
					"settings":
					{
						"buffer_size": 3938,
						"regions":
						{
						},
						"selection":
						[
							[
								439,
								439
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 504.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "components/ai.py",
					"settings":
					{
						"buffer_size": 2653,
						"regions":
						{
						},
						"selection":
						[
							[
								1945,
								1945
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "systems/damage.py",
					"settings":
					{
						"buffer_size": 4404,
						"regions":
						{
						},
						"selection":
						[
							[
								1388,
								1388
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "systems/attack.py",
					"settings":
					{
						"buffer_size": 4882,
						"regions":
						{
						},
						"selection":
						[
							[
								3112,
								3112
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "components/fighter.py",
					"settings":
					{
						"buffer_size": 2715,
						"regions":
						{
						},
						"selection":
						[
							[
								1606,
								1606
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "components/defender.py",
					"settings":
					{
						"buffer_size": 2180,
						"regions":
						{
						},
						"selection":
						[
							[
								111,
								111
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "mocks.py",
					"settings":
					{
						"buffer_size": 9667,
						"regions":
						{
						},
						"selection":
						[
							[
								39,
								46
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "components/effects.py",
					"settings":
					{
						"buffer_size": 347,
						"regions":
						{
						},
						"selection":
						[
							[
								180,
								180
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "systems/effects_manager.py",
					"settings":
					{
						"buffer_size": 1379,
						"regions":
						{
						},
						"selection":
						[
							[
								1300,
								1300
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "spells.py",
					"settings":
					{
						"buffer_size": 349,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "components/caster.py",
					"settings":
					{
						"buffer_size": 153,
						"regions":
						{
						},
						"selection":
						[
							[
								23,
								23
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 14.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "systems/spell_system.py",
					"settings":
					{
						"buffer_size": 1450,
						"regions":
						{
						},
						"selection":
						[
							[
								1008,
								1008
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "systems/skill_manager.py",
					"settings":
					{
						"buffer_size": 1694,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "components/skills.py",
					"settings":
					{
						"buffer_size": 736,
						"regions":
						{
						},
						"selection":
						[
							[
								80,
								80
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "rltests.py",
					"settings":
					{
						"buffer_size": 37665,
						"regions":
						{
						},
						"selection":
						[
							[
								37465,
								37465
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 10176.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "systems/feat_system.py",
					"settings":
					{
						"buffer_size": 3097,
						"regions":
						{
						},
						"selection":
						[
							[
								1765,
								1765
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 210.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "feats.py",
					"settings":
					{
						"buffer_size": 491,
						"regions":
						{
						},
						"selection":
						[
							[
								467,
								467
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "components/performer.py",
					"settings":
					{
						"buffer_size": 90,
						"regions":
						{
						},
						"selection":
						[
							[
								90,
								90
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "targeting.py",
					"settings":
					{
						"buffer_size": 321,
						"regions":
						{
						},
						"selection":
						[
							[
								196,
								196
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "systems/pickup_system.py",
					"settings":
					{
						"buffer_size": 386,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								33
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "components/inventory.py",
					"settings":
					{
						"buffer_size": 3500,
						"regions":
						{
						},
						"selection":
						[
							[
								2867,
								2867
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "generators.py",
					"settings":
					{
						"buffer_size": 1008,
						"regions":
						{
						},
						"selection":
						[
							[
								446,
								446
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "item_factory.py",
					"settings":
					{
						"buffer_size": 4312,
						"regions":
						{
						},
						"selection":
						[
							[
								888,
								888
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "item_functions.py",
					"settings":
					{
						"buffer_size": 6250,
						"regions":
						{
						},
						"selection":
						[
							[
								817,
								911
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 42.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "monsters.py",
					"settings":
					{
						"buffer_size": 3629,
						"regions":
						{
						},
						"selection":
						[
							[
								488,
								488
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 630.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 38,
					"file": ".gitignore",
					"settings":
					{
						"buffer_size": 26,
						"regions":
						{
						},
						"selection":
						[
							[
								26,
								26
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "components/item.py",
					"settings":
					{
						"buffer_size": 104,
						"regions":
						{
						},
						"selection":
						[
							[
								104,
								104
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "/C/Users/Leon/Documents/steem",
					"settings":
					{
						"buffer_size": 52,
						"regions":
						{
						},
						"selection":
						[
							[
								52,
								52
							]
						],
						"settings":
						{
							"auto_name": "P5Jw8CykYmrcXN8FSRYAp7LCWC2b22KDePfcpxhC9rGHSSpDk5",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 287.0,
	"status_bar_visible": true
}
