{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"current",
				"current_game_state"
			],
			[
				"curr",
				"current_game_state"
			],
			[
				"ply",
				"player_turn_results"
			],
			[
				"mock",
				"create_mockchar_11"
			],
			[
				"Equip",
				"EquippableFactory"
			],
			[
				"as",
				"assertEqual"
			],
			[
				"tar",
				"target_y"
			],
			[
				"get",
				"get_targetable_entities_in_range"
			],
			[
				"targ",
				"targetable_entity"
			],
			[
				"test_pl",
				"test_player_fighter"
			],
			[
				"target",
				"targetable_entity"
			],
			[
				"per",
				"performer_component"
			],
			[
				"feat_",
				"feat_damage_modifier"
			],
			[
				"ta",
				"targeting_message"
			],
			[
				"Effe",
				"EffectNames"
			],
			[
				"create",
				"create_mockchar_5"
			],
			[
				"assert",
				"assertTrue"
			],
			[
				"test_ar",
				"test_arrows_2"
			],
			[
				"Eq",
				"EquippableFactory"
			],
			[
				"equip",
				"equipped_items"
			],
			[
				"Euip",
				"Equipment"
			],
			[
				"Equ",
				"EquippableFactory"
			],
			[
				"Ammu",
				"AmmunitionTypes"
			],
			[
				"missile",
				"missile_weapon_ammunition_lookup"
			],
			[
				"curren",
				"current_targeting_consumable"
			],
			[
				"curre",
				"current_targeting_consumable"
			],
			[
				"defend",
				"defend_missile_attack"
			],
			[
				"defe",
				"defender"
			],
			[
				"get_cu",
				"get_current_missile_damage"
			],
			[
				"melee_",
				"melee_weapon"
			],
			[
				"get_hit",
				"get_hit_modifier_from_equipment"
			],
			[
				"missile_",
				"missile_targeting_weapon"
			],
			[
				"missile_t",
				"missile_targeting"
			],
			[
				"missile_tar",
				"missile_targeting_weapon"
			],
			[
				"spell_",
				"spell_targeting_result"
			],
			[
				"make_fi",
				"make_fireball_scroll"
			],
			[
				"player",
				"player_turn_result"
			],
			[
				"weapon",
				"weapon_category"
			],
			[
				"test",
				"test_entity"
			],
			[
				"skill_check_",
				"skill_check_function_2"
			],
			[
				"get_p",
				"get_physical_damage_modifier_from_equipment"
			],
			[
				"get_hit_",
				"get_hit_modifier_from_status_effects"
			],
			[
				"get_phy",
				"get_physical_damage_modifier_from_status_effects"
			],
			[
				"make_bless",
				"make_bless_spell"
			],
			[
				"kwargs",
				"kwargs"
			],
			[
				"weapon_s",
				"weapon_skill_num"
			],
			[
				"equipp",
				"equippable_entity"
			],
			[
				"prev",
				"previous_game_state"
			],
			[
				"player_turn",
				"player_turn_results"
			],
			[
				"KEY_E",
				"KEY_ENTER"
			],
			[
				"test_pot",
				"test_potion2"
			],
			[
				"ident",
				"identified_scrolls"
			],
			[
				"scroll_desc",
				"scroll_description_links"
			],
			[
				"scr",
				"scroll_descriptions"
			],
			[
				"scroll",
				"scroll_descriptions"
			],
			[
				"consu",
				"consumable_type"
			],
			[
				"test_",
				"test_identified_component"
			],
			[
				"get_",
				"get_display_name"
			],
			[
				"plate_",
				"plate_armor_item"
			],
			[
				"sca",
				"scale_armor_item"
			],
			[
				"chain",
				"chain_armor_item"
			],
			[
				"leat",
				"leather_armor_item"
			],
			[
				"padd",
				"padded_armor_item"
			],
			[
				"tower_s",
				"tower_shield_item"
			],
			[
				"small_",
				"small_shield_item"
			],
			[
				"bol",
				"bolts_item"
			],
			[
				"obs",
				"obsidian_arrows_item"
			],
			[
				"greats",
				"greatsword_item"
			],
			[
				"heal",
				"heal_book_consumable"
			],
			[
				"fireb",
				"fireball_book_consumable"
			],
			[
				"confu",
				"confusion_scroll_consumable"
			],
			[
				"fire",
				"fireball_scroll_consumable"
			],
			[
				"lig",
				"lightning_scroll_consumable"
			],
			[
				"learn",
				"learn_heal"
			],
			[
				"attack_modifier",
				"attack_modifier"
			],
			[
				"heal_bo",
				"heal_book_name"
			],
			[
				"fir",
				"fireball_book_name"
			],
			[
				"padded",
				"padded_armor_entity"
			],
			[
				"player_",
				"player_turn_results"
			],
			[
				"time_",
				"time_results"
			],
			[
				"ligh",
				"lightning_scroll_name"
			],
			[
				"test_ent",
				"test_entity_2"
			],
			[
				"get_basic",
				"get_basic_swing_damage"
			],
			[
				"get_b",
				"get_basic_thrust_damage"
			],
			[
				"effect",
				"effect_list"
			],
			[
				"ef",
				"effect_list"
			],
			[
				"test_effe",
				"test_effect_2"
			],
			[
				"ammu",
				"ammunition_name"
			],
			[
				"id",
				"identified"
			],
			[
				"identi",
				"identified_potions"
			],
			[
				"potion",
				"potion_links"
			],
			[
				"potion_descr",
				"potion_description_links"
			],
			[
				"Item",
				"ItemFactory"
			],
			[
				"effec",
				"effects_component"
			],
			[
				"pot",
				"potion_description_links"
			],
			[
				"potion_",
				"potion_description_links"
			],
			[
				"potion_des",
				"potion_description_links"
			],
			[
				"text",
				"text_menu"
			],
			[
				"shiel",
				"shield_name"
			],
			[
				"miss",
				"missile_weapon"
			],
			[
				"get_skill",
				"get_skill_check"
			],
			[
				"equi",
				"equipment"
			],
			[
				"makeSw",
				"makeGreatSword"
			],
			[
				"equippab",
				"EquippableFactory"
			],
			[
				"makeFire",
				"makeFireballScroll"
			],
			[
				"mis",
				"missile_weapon"
			],
			[
				"player_tur",
				"player_turn_results"
			],
			[
				"missile_d",
				"missile_damage_bonus"
			],
			[
				"cross",
				"crossbow_equippable"
			],
			[
				"rapier",
				"rapier_melee_weapon"
			],
			[
				"melee",
				"melee_weapon"
			],
			[
				"great",
				"greatsword_equippable"
			],
			[
				"mele",
				"melee_attack_type"
			],
			[
				"melee_d",
				"melee_damage_bonus"
			],
			[
				"melee_dam",
				"melee_damage_type"
			],
			[
				"temp_",
				"temp_equippable_missile"
			],
			[
				"Equipp",
				"EquippableFactory"
			],
			[
				"defense",
				"defense_choice"
			],
			[
				"weapon_",
				"weapon_skill_num"
			],
			[
				"test_char",
				"test_char_pd"
			],
			[
				"Euipp",
				"EquippableFactory"
			],
			[
				"test_equip",
				"test_equipment_component"
			],
			[
				"test_equp",
				"test_equipment_component"
			],
			[
				"skill",
				"skill_target"
			],
			[
				"payer",
				"player_turn_result"
			],
			[
				"test_figh",
				"test_fighter_component"
			],
			[
				"diffi",
				"difficulty_modifiers"
			],
			[
				"fighter",
				"fighter_component"
			]
		]
	},
	"buffers":
	[
		{
			"file": "loader_functions/constants.py",
			"settings":
			{
				"buffer_size": 2585,
				"line_ending": "Windows"
			}
		},
		{
			"file": "loader_functions/initialize_new_game.py",
			"settings":
			{
				"buffer_size": 5307,
				"line_ending": "Windows"
			}
		},
		{
			"file": "entity.py",
			"settings":
			{
				"buffer_size": 2145,
				"line_ending": "Windows"
			}
		},
		{
			"file": "engine.py",
			"settings":
			{
				"buffer_size": 5762,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/input_process_system.py",
			"settings":
			{
				"buffer_size": 8703,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "from game_messages import Message\nfrom game_states import GameStates\nfrom death_functions import handle_death\nfrom components.equippable import make_dropped_missile\nfrom death_functions import kill_player, kill_monster\n\ndef process_results(player_turn_results, game_state, entities, player, message_log, targets):\n	for player_turn_result in player_turn_results:\n		quit = player_turn_result.get('quit')\n		message = player_turn_result.get('message')\n		dead_entity = player_turn_result.get('dead')\n		item_added = player_turn_result.get('item_added')\n		item_consumed = player_turn_result.get('consumed')\n		item_dropped = player_turn_result.get('item_dropped')\n		targeting = player_turn_result.get('targeting')\n		spell_targeting = player_turn_result.get('spell_targeting')\n		feat_targeting = player_turn_result.get('feat_targeting')\n		targeting_cancelled = player_turn_result.get('targeting_cancelled')\n		equip = player_turn_result.get('equip')\n		cast = player_turn_result.get('cast')\n		missile_targeting = player_turn_result.get('missile_targeting')\n		fired_weapon = player_turn_result.get(\"fired_weapon\")\n		missile_dropped = player_turn_result.get(\"missile_dropped\")\n		dropped_location = player_turn_result.get(\"dropped_location\") \n		monster_drops = player_turn_result.get(\"monster_drops\")\n		loaded = player_turn_result.get(\"loaded\")\n\n		if quit:\n			return True\n		if message:\n			message_log.add_message(message)\n		if dead_entity:\n			message, game_state, entities = handle_death(entities, dead_entity, player, game_state)\n			message_log.add_message(message)\n		if item_added:\n			entities.remove(item_added)\n		# TODO: roll these three results into one?\n		if targeting:\n			game_state.previous_game_state = GameStates.PLAYERS_TURN\n			game_state.current_game_state = GameStates.TARGETING\n			targets.current_targeting_consumable = targeting\n			message_log.add_message(targets.current_targeting_consumable.consumable.targeting_message)\n		if spell_targeting:\n			game_state.previous_game_state = GameStates.PLAYERS_TURN\n			game_state.current_game_state = GameStates.TARGETING\n			targets.current_targeting_spell = spell_targeting\n			message_log.add_message(targets.current_targeting_spell.targeting_message)\n		if feat_targeting:\n			game_state.previous_game_state = GameStates.PLAYERS_TURN\n			game_state.current_game_state = GameStates.TARGETING\n			targets.current_targeting_feat = feat_targeting\n			message_log.add_message(targets.current_targeting_feat.targeting_message)\n		if missile_targeting:\n			game_state.previous_game_state = GameStates.PLAYERS_TURN\n			game_state.current_game_state = GameStates.TARGETING\n			targets.current_targeting_weapon = True\n			message_log.add_message(Message(\"Choose a target for your missile attack...\"))\n		if missile_dropped:\n			missile_entity = make_dropped_missile(missile_dropped, dropped_location)\n			entities.append(missile_entity)\n		if item_dropped:\n			entities.append(item_dropped)\n		if equip:\n			equip_results = player.equipment.toggle_equip(equip)\n			for equip_result in equip_results:\n				equipped = equip_result.get('equipped')\n				dequipped = equip_result.get('dequipped')\n				fail_equip = equip_result.get('fail_equip')\n				if equipped:\n					message_log.add_message(Message('You equipped the {0}.'.format(equipped.name.true_name)))\n				if dequipped:\n					message_log.add_message(Message('You dequipped the {0}.'.format(dequipped.name.true_name)))\n				if fail_equip:\n					message_log.add_message(Message(fail_equip))\n			pass\n		if targeting_cancelled:\n			game_state.current_game_state = previous_game_state\n			message_log.add_message(Message('Targeting cancelled'))\n\n	return game_state, entities, player, targets\n\ndef process_ai_results(enemy_turn_results, acting_entity, entities, player, message_log, game_state):\n	for enemy_turn_result in enemy_turn_results:\n		message = enemy_turn_result.get('message')\n		dead_entity = enemy_turn_result.get('dead')\n		missile_dropped = enemy_turn_result.get('missile_dropped')\n		dropped_location = enemy_turn_result.get('dropped_location')\n		equips = enemy_turn_result.get(\"equips\")\n		\n		if message:\n			message_log.add_message(message)\n		if missile_dropped:\n			missile_entity = make_dropped_missile(missile_dropped, dropped_location)\n			entities.append(missile_entity)\n		if equips:\n			acting_entity.equipment.toggle_equip(equips)\n		if dead_entity:\n			if dead_entity == player:\n				message, game_state = kill_player(dead_entity, game_state)\n				print(f\"gs is {game_state.current_game_state}\")\n			else:\n				message = kill_monster(dead_entity)\n			message_log.add_message(message)\n			if game_state == GameStates.PLAYER_DEAD:\n				break\n\n	return entities, game_state, message_log	",
			"file": "systems/results_process_system.py",
			"file_size": 4746,
			"file_write_time": 132443892629695126,
			"settings":
			{
				"buffer_size": 4641,
				"line_ending": "Windows"
			}
		},
		{
			"file": "map_objects/game_map.py",
			"settings":
			{
				"buffer_size": 7704,
				"line_ending": "Windows"
			}
		},
		{
			"file": "input_handlers.py",
			"settings":
			{
				"buffer_size": 5150,
				"line_ending": "Windows"
			}
		},
		{
			"file": "game_states.py",
			"settings":
			{
				"buffer_size": 332,
				"line_ending": "Windows"
			}
		},
		{
			"file": "menus.py",
			"settings":
			{
				"buffer_size": 7519,
				"line_ending": "Windows"
			}
		},
		{
			"file": "render_functions.py",
			"settings":
			{
				"buffer_size": 6305,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 76 files for \"pick up the\"\n\nC:\\dev\\p3roguelike\\components\\inventory.py:\n   24  			results.append({\n   25  				'item_added': item,\n   26: 				'message': Message('You pick up the {0}!'.format(temp_display_name), libtcod.yellow)\n   27  			})\n   28  			for current_item in self.items:\n\n1 match in 1 file\n\n\nSearching 76 files for \"if targeting\"\n\nC:\\dev\\p3roguelike\\p3RL.sublime-workspace:\n  561  		},\n  562  		{\n  563: 			\"contents\": \"from game_messages import Message\\nfrom game_states import GameStates\\nfrom death_functions import handle_death\\nfrom components.equippable import make_dropped_missile\\nfrom death_functions import kill_player, kill_monster\\n\\ndef process_results(player_turn_results, game_state, entities, player, message_log, targets):\\n	for player_turn_result in player_turn_results:\\n		quit = player_turn_result.get('quit')\\n		message = player_turn_result.get('message')\\n		dead_entity = player_turn_result.get('dead')\\n		item_added = player_turn_result.get('item_added')\\n		item_consumed = player_turn_result.get('consumed')\\n		item_dropped = player_turn_result.get('item_dropped')\\n		targeting = player_turn_result.get('targeting')\\n		spell_targeting = player_turn_result.get('spell_targeting')\\n		feat_targeting = player_turn_result.get('feat_targeting')\\n		targeting_cancelled = player_turn_result.get('targeting_cancelled')\\n		equip = player_turn_result.get('equip')\\n		cast = player_turn_result.get('cast')\\n		missile_targeting = player_turn_result.get('missile_targeting')\\n		fired_weapon = player_turn_result.get(\\\"fired_weapon\\\")\\n		missile_dropped = player_turn_result.get(\\\"missile_dropped\\\")\\n		dropped_location = player_turn_result.get(\\\"dropped_location\\\") \\n		monster_drops = player_turn_result.get(\\\"monster_drops\\\")\\n		loaded = player_turn_result.get(\\\"loaded\\\")\\n\\n		if quit:\\n			return True\\n		if message:\\n			message_log.add_message(message)\\n		if dead_entity:\\n			message, game_state, entities = handle_death(entities, dead_entity, player, game_state)\\n			message_log.add_message(message)\\n		if item_added:\\n			entities.remove(item_added)\\n		# TODO: roll these three results into one?\\n		if targeting:\\n			game_state.previous_game_state = GameStates.PLAYERS_TURN\\n			game_state.current_game_state = GameStates.TARGETING\\n			targets.current_targeting_consumable = targeting\\n			message_log.add_message(targets.current_targeting_consumable.consumable.targeting_message)\\n		if spell_targeting:\\n			game_state.previous_game_state = GameStates.PLAYERS_TURN\\n			game_state.current_game_state = GameStates.TARGETING\\n			targets.current_targeting_spell = spell_targeting\\n			message_log.add_message(targets.current_targeting_spell.targeting_message)\\n		if feat_targeting:\\n			game_state.previous_game_state = GameStates.PLAYERS_TURN\\n			game_state.current_game_state = GameStates.TARGETING\\n			targets.current_targeting_feat = feat_targeting\\n			message_log.add_message(targets.current_targeting_feat.targeting_message)\\n		if missile_targeting:\\n			game_state.previous_game_state = GameStates.PLAYERS_TURN\\n			game_state.current_game_state = GameStates.TARGETING\\n			targets.current_targeting_weapon = True\\n			message_log.add_message(Message(\\\"Choose a target for your missile attack...\\\"))\\n		if missile_dropped:\\n			missile_entity = make_dropped_missile(missile_dropped, dropped_location)\\n			entities.append(missile_entity)\\n		if item_dropped:\\n			entities.append(item_dropped)\\n		if equip:\\n			equip_results = player.equipment.toggle_equip(equip)\\n			for equip_result in equip_results:\\n				equipped = equip_result.get('equipped')\\n				dequipped = equip_result.get('dequipped')\\n				fail_equip = equip_result.get('fail_equip')\\n				if equipped:\\n					message_log.add_message(Message('You equipped the {0}.'.format(equipped.name.true_name)))\\n				if dequipped:\\n					message_log.add_message(Message('You dequipped the {0}.'.format(dequipped.name.true_name)))\\n				if fail_equip:\\n					message_log.add_message(Message(fail_equip))\\n			pass\\n		if targeting_cancelled:\\n			game_state.current_game_state = previous_game_state\\n			message_log.add_message(Message('Targeting cancelled'))\\n\\n	return game_state, entities, player, targets\\n\\ndef process_ai_results(enemy_turn_results, acting_entity, entities, player, message_log, game_state):\\n	for enemy_turn_result in enemy_turn_results:\\n		message = enemy_turn_result.get('message')\\n		dead_entity = enemy_turn_result.get('dead')\\n		missile_dropped = enemy_turn_result.get('missile_dropped')\\n		dropped_location = enemy_turn_result.get('dropped_location')\\n		equips = enemy_turn_result.get(\\\"equips\\\")\\n		\\n		if message:\\n			message_log.add_message(message)\\n		if missile_dropped:\\n			missile_entity = make_dropped_missile(missile_dropped, dropped_location)\\n			entities.append(missile_entity)\\n		if equips:\\n			acting_entity.equipment.toggle_equip(equips)\\n		if dead_entity:\\n			if dead_entity == player:\\n				message, game_state = kill_player(dead_entity, game_state)\\n				print(f\\\"gs is {game_state.current_game_state}\\\")\\n			else:\\n				message = kill_monster(dead_entity)\\n			message_log.add_message(message)\\n			if game_state == GameStates.PLAYER_DEAD:\\n				break\\n\\n	return entities, game_state, message_log	\",\n  564  			\"file\": \"systems/results_process_system.py\",\n  565  			\"file_size\": 4746,\n\nC:\\dev\\p3roguelike\\systems\\results_process_system.py:\n   36  			entities.remove(item_added)\n   37  		# TODO: roll these three results into one?\n   38: 		if targeting:\n   39  			game_state.previous_game_state = GameStates.PLAYERS_TURN\n   40  			game_state.current_game_state = GameStates.TARGETING\n   ..\n   74  					message_log.add_message(Message(fail_equip))\n   75  			pass\n   76: 		if targeting_cancelled:\n   77  			game_state.current_game_state = previous_game_state\n   78  			message_log.add_message(Message('Targeting cancelled'))\n\n4 matches across 2 files\n\n\nSearching 76 files for \"there are no valid\"\n\nC:\\dev\\p3roguelike\\systems\\feat_system.py:\n   52  				break\n   53  		else:\n   54: 			results.append({'message': Message('There are no valid targets there.')})\n   55  			return results\n   56  		kwargs = {**feat.function_kwargs, **kwargs}\n\n1 match in 1 file\n\n\nSearching 76 files for \"feat_targeting\"\n\nC:\\dev\\p3roguelike\\p3RL.sublime-workspace:\n  561  		},\n  562  		{\n  563: 			\"contents\": \"from game_messages import Message\\nfrom game_states import GameStates\\nfrom death_functions import handle_death\\nfrom components.equippable import make_dropped_missile\\nfrom death_functions import kill_player, kill_monster\\n\\ndef process_results(player_turn_results, game_state, entities, player, message_log, targets):\\n	for player_turn_result in player_turn_results:\\n		quit = player_turn_result.get('quit')\\n		message = player_turn_result.get('message')\\n		dead_entity = player_turn_result.get('dead')\\n		item_added = player_turn_result.get('item_added')\\n		item_consumed = player_turn_result.get('consumed')\\n		item_dropped = player_turn_result.get('item_dropped')\\n		targeting = player_turn_result.get('targeting')\\n		spell_targeting = player_turn_result.get('spell_targeting')\\n		feat_targeting = player_turn_result.get('feat_targeting')\\n		targeting_cancelled = player_turn_result.get('targeting_cancelled')\\n		equip = player_turn_result.get('equip')\\n		cast = player_turn_result.get('cast')\\n		missile_targeting = player_turn_result.get('missile_targeting')\\n		fired_weapon = player_turn_result.get(\\\"fired_weapon\\\")\\n		missile_dropped = player_turn_result.get(\\\"missile_dropped\\\")\\n		dropped_location = player_turn_result.get(\\\"dropped_location\\\") \\n		monster_drops = player_turn_result.get(\\\"monster_drops\\\")\\n		loaded = player_turn_result.get(\\\"loaded\\\")\\n\\n		if quit:\\n			return True\\n		if message:\\n			message_log.add_message(message)\\n		if dead_entity:\\n			message, game_state, entities = handle_death(entities, dead_entity, player, game_state)\\n			message_log.add_message(message)\\n		if item_added:\\n			entities.remove(item_added)\\n		# TODO: roll these three results into one?\\n		if targeting:\\n			game_state.previous_game_state = GameStates.PLAYERS_TURN\\n			game_state.current_game_state = GameStates.TARGETING\\n			targets.current_targeting_consumable = targeting\\n			message_log.add_message(targets.current_targeting_consumable.consumable.targeting_message)\\n		if spell_targeting:\\n			game_state.previous_game_state = GameStates.PLAYERS_TURN\\n			game_state.current_game_state = GameStates.TARGETING\\n			targets.current_targeting_spell = spell_targeting\\n			message_log.add_message(targets.current_targeting_spell.targeting_message)\\n		if feat_targeting:\\n			game_state.previous_game_state = GameStates.PLAYERS_TURN\\n			game_state.current_game_state = GameStates.TARGETING\\n			targets.current_targeting_feat = feat_targeting\\n			message_log.add_message(targets.current_targeting_feat.targeting_message)\\n		if missile_targeting:\\n			game_state.previous_game_state = GameStates.PLAYERS_TURN\\n			game_state.current_game_state = GameStates.TARGETING\\n			targets.current_targeting_weapon = True\\n			message_log.add_message(Message(\\\"Choose a target for your missile attack...\\\"))\\n		if missile_dropped:\\n			missile_entity = make_dropped_missile(missile_dropped, dropped_location)\\n			entities.append(missile_entity)\\n		if item_dropped:\\n			entities.append(item_dropped)\\n		if equip:\\n			equip_results = player.equipment.toggle_equip(equip)\\n			for equip_result in equip_results:\\n				equipped = equip_result.get('equipped')\\n				dequipped = equip_result.get('dequipped')\\n				fail_equip = equip_result.get('fail_equip')\\n				if equipped:\\n					message_log.add_message(Message('You equipped the {0}.'.format(equipped.name.true_name)))\\n				if dequipped:\\n					message_log.add_message(Message('You dequipped the {0}.'.format(dequipped.name.true_name)))\\n				if fail_equip:\\n					message_log.add_message(Message(fail_equip))\\n			pass\\n		if targeting_cancelled:\\n			game_state.current_game_state = previous_game_state\\n			message_log.add_message(Message('Targeting cancelled'))\\n\\n	return game_state, entities, player, targets\\n\\ndef process_ai_results(enemy_turn_results, acting_entity, entities, player, message_log, game_state):\\n	for enemy_turn_result in enemy_turn_results:\\n		message = enemy_turn_result.get('message')\\n		dead_entity = enemy_turn_result.get('dead')\\n		missile_dropped = enemy_turn_result.get('missile_dropped')\\n		dropped_location = enemy_turn_result.get('dropped_location')\\n		equips = enemy_turn_result.get(\\\"equips\\\")\\n		\\n		if message:\\n			message_log.add_message(message)\\n		if missile_dropped:\\n			missile_entity = make_dropped_missile(missile_dropped, dropped_location)\\n			entities.append(missile_entity)\\n		if equips:\\n			acting_entity.equipment.toggle_equip(equips)\\n		if dead_entity:\\n			if dead_entity == player:\\n				message, game_state = kill_player(dead_entity, game_state)\\n				print(f\\\"gs is {game_state.current_game_state}\\\")\\n			else:\\n				message = kill_monster(dead_entity)\\n			message_log.add_message(message)\\n			if game_state == GameStates.PLAYER_DEAD:\\n				break\\n\\n	return entities, game_state, message_log	\",\n  564  			\"file\": \"systems/results_process_system.py\",\n  565  			\"file_size\": 4746,\n\nC:\\dev\\p3roguelike\\systems\\feat_system.py:\n   41  	\n   42  	elif not (target_x or target_y):\n   43: 		results.append({'feat_targeting': feat})\n   44  	\n   45  	elif int(distance(entity, target_x, target_y)) > feat.feat_range:\n\nC:\\dev\\p3roguelike\\systems\\results_process_system.py:\n   15  		targeting = player_turn_result.get('targeting')\n   16  		spell_targeting = player_turn_result.get('spell_targeting')\n   17: 		feat_targeting = player_turn_result.get('feat_targeting')\n   18  		targeting_cancelled = player_turn_result.get('targeting_cancelled')\n   19  		equip = player_turn_result.get('equip')\n   ..\n   46  			targets.current_targeting_spell = spell_targeting\n   47  			message_log.add_message(targets.current_targeting_spell.targeting_message)\n   48: 		if feat_targeting:\n   49  			game_state.previous_game_state = GameStates.PLAYERS_TURN\n   50  			game_state.current_game_state = GameStates.TARGETING\n   51: 			targets.current_targeting_feat = feat_targeting\n   52  			message_log.add_message(targets.current_targeting_feat.targeting_message)\n   53  		if missile_targeting:\n\n9 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 12247,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "death_functions.py",
			"settings":
			{
				"buffer_size": 1312,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/move_system.py",
			"settings":
			{
				"buffer_size": 3938,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/ai.py",
			"settings":
			{
				"buffer_size": 2653,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/attack.py",
			"settings":
			{
				"buffer_size": 4838,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/fighter.py",
			"settings":
			{
				"buffer_size": 2765,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/equipment.py",
			"settings":
			{
				"buffer_size": 5068,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/equippable.py",
			"settings":
			{
				"buffer_size": 8776,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/defender.py",
			"settings":
			{
				"buffer_size": 2180,
				"line_ending": "Windows"
			}
		},
		{
			"file": "mocks.py",
			"settings":
			{
				"buffer_size": 9735,
				"line_ending": "Windows"
			}
		},
		{
			"file": "spells.py",
			"settings":
			{
				"buffer_size": 349,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/caster.py",
			"settings":
			{
				"buffer_size": 153,
				"line_ending": "Windows"
			}
		},
		{
			"file": "rltests.py",
			"settings":
			{
				"buffer_size": 39972,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/spell_system.py",
			"settings":
			{
				"buffer_size": 2505,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/skill_manager.py",
			"settings":
			{
				"buffer_size": 1694,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/skills.py",
			"settings":
			{
				"buffer_size": 736,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/feat_system.py",
			"settings":
			{
				"buffer_size": 3403,
				"line_ending": "Windows"
			}
		},
		{
			"file": "feats.py",
			"settings":
			{
				"buffer_size": 541,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/performer.py",
			"settings":
			{
				"buffer_size": 90,
				"line_ending": "Windows"
			}
		},
		{
			"file": "targeting.py",
			"settings":
			{
				"buffer_size": 321,
				"line_ending": "Windows"
			}
		},
		{
			"file": "systems/pickup_system.py",
			"settings":
			{
				"buffer_size": 386,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/inventory.py",
			"settings":
			{
				"buffer_size": 3490,
				"line_ending": "Windows"
			}
		},
		{
			"file": "generators.py",
			"settings":
			{
				"buffer_size": 1008,
				"line_ending": "Windows"
			}
		},
		{
			"file": "item_factory.py",
			"settings":
			{
				"buffer_size": 4312,
				"line_ending": "Windows"
			}
		},
		{
			"file": "item_functions.py",
			"settings":
			{
				"buffer_size": 7176,
				"line_ending": "Windows"
			}
		},
		{
			"file": "monsters.py",
			"settings":
			{
				"buffer_size": 3649,
				"line_ending": "Windows"
			}
		},
		{
			"file": "components/item.py",
			"settings":
			{
				"buffer_size": 104,
				"line_ending": "Windows"
			}
		},
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 26,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 392.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/dev/p3roguelike/components/stats.py",
		"/C/dev/p3roguelike/game_state.py",
		"/C/dev/p3roguelike/p3RL.sublime-workspace",
		"/C/dev/p3roguelike/systems/damage.py",
		"/C/Users/Leon/Documents/steem",
		"/C/dev/p3roguelike/systems/effects_manager.py",
		"/C/dev/p3roguelike/components/effects.py",
		"/C/dev/p3roguelike/.git/COMMIT_EDITMSG",
		"/C/dev/p3roguelike/components/meleeweapon.py",
		"/C/dev/p3roguelike/components/missileweapon.py",
		"/C/dev/p3roguelike/components/equipment.py",
		"/C/dev/p3roguelike/components/equippable.py",
		"/C/dev/p3roguelike/attack_types.py",
		"/C/dev/p3roguelike/components/identified.py",
		"/C/dev/p3roguelike/death_functions.py",
		"/C/dev/p3roguelike/components/ammunition.py",
		"/C/dev/p3roguelike/equipment_slots.py",
		"/C/dev/p3roguelike/systems/name_system.py",
		"/C/dev/p3roguelike/random_utils.py",
		"/C/dev/p3roguelike/components/feats.py",
		"/C/dev/p3rl-copy/engine.py",
		"/C/dev/microblog/microblog.py",
		"/C/dev/microblog/app/templates/index.html",
		"/C/dev/microblog/app/templates/base.html",
		"/C/dev/microblog/app/routes.py",
		"/C/dev/microblog/.flaskenv",
		"/C/dev/microblog/app/__init__.py",
		"/C/dev/microblog/config.py",
		"/C/dev/microblog/app/forms.py",
		"/C/dev/p3roguelike/map_objects/game_map.py",
		"/C/dev/p3roguelike/systems/skill_manager.py",
		"/C/dev/str.py",
		"/C/dev/p3roguelike - Copy/systems/move_system.py",
		"/C/dev/ClonedRL/atrl-master/main.py",
		"/C/dev/p3roguelike/damage_types.py",
		"/C/dev/p3roguelike/spells.py",
		"/C/dev/p3roguelike/game_states.py",
		"/C/dev/p3roguelike/components/name.py",
		"/C/dev/p3rl-copy/components/fighter.py",
		"/C/dev/p3roguelike - Copy/systems/input_process_system.py",
		"/C/dev/p3rl-copy/systems/results_process_system.py",
		"/C/dev/p3roguelike-base/engine.py",
		"/C/dev/ClonedRL/atrl-master/game/loader_functions/tiles.py",
		"/C/dev/p3roguelike/components/ai.py",
		"/C/dev/ClonedRL/atrl-master/game/render_functions.py",
		"/C/dev/ClonedRL/atrl-master/game/death_functions.py",
		"/C/dev/ClonedRL/atrl-master/game/entity.py",
		"/C/dev/ClonedRL/atrl-master/game/map_objects/game_map.py",
		"/C/dev/ClonedRL/atrl-master/game/loader_functions/initialize_new_game.py",
		"/C/dev/p3roguelike/systems/pickup_system.py",
		"/C/dev/p3roguelike/input_process_system.py",
		"/C/dev/p3roguelike/systems/pickup_system",
		"/C/dev/p3roguelike/systems/move_system.py",
		"/C/dev/p3roguelike/components/inventory.py",
		"/C/dev/ClonedRL/atrl-master/game/menus.py",
		"/C/dev/p3roguelike/components/consumable.py",
		"/C/dev/p3roguelike/mocks.py",
		"/C/dev/p3roguelike/render_functions.py",
		"/C/dev/p3roguelike/loader_functions/tile_codes.py",
		"/C/dev/jsrl/jsrl.html",
		"/C/dev/p3roguelike/main.py",
		"/C/dev/p3roguelike/systems/attack.py",
		"/C/dev/p3roguelike/potion_test.py",
		"/C/dev/p3roguelike/entity.py",
		"/C/dev/p3roguelike/systems/time_system.py",
		"/C/dev/p3roguelike/components/defender.py",
		"/C/dev/p3roguelike/components/skills.py",
		"/C/dev/p3roguelike/menu_options.py",
		"/C/dev/p3roguelike/loader_functions/data_loaders.py",
		"/C/dev/p3roguelike/generators.py",
		"/C/dev/p3roguelike/input_handlers.py",
		"/C/dev/p3roguelike/game_messages.py",
		"/C/dev/p3roguelike/dlevel.py",
		"/C/dev/p3roguelike/components/stairs.py",
		"/C/workspace/pingpong/index.html",
		"/C/dev/p3roguelike/identified.py",
		"/C/dev/property.py",
		"/C/dev/p3roguelike/components/level.py",
		"/C/dev/p3roguelike/fov_functions.py",
		"/C/dev/p3roguelike/loader_functions/skill_book.py",
		"/C/dev/p3roguelike/components/caster.py",
		"/C/dev/p3roguelike/rltests.py",
		"/C/dev/p3roguelike/rltests2.py",
		"/C/dev/test.py",
		"/C/dev/p3roguelike/components/fighter.py",
		"/C/dev/p3roguelike-base/components/fighter.py",
		"/C/dev/p3roguelike/monsters",
		"/C/dev/animal.html",
		"/C/dev/rock.html",
		"/C/dev/pong/pong3.html",
		"/C/dev/p3roguelike/map_objects/rectangle.py",
		"/C/dev/p3roguelike/engine.py",
		"/C/dev/p3roguelike-base/map_objects/game_map.py",
		"/C/dev/p3roguelike/loader_functions/initialize_new_game.py",
		"/C/dev/p3roguelike/map_objects/tile.py",
		"/C/dev/p3roguelike/components/level",
		"/C/workspace/pingpong/js/pingpong.js",
		"/C/dev/simple.py",
		"/C/dev/p3roguelike/components/__init__.py",
		"/C/workspace/pingpong/css/pingpong.css",
		"/C/Users/Leon/AppData/Local/Programs/Python/Python36-32/Lib/site-packages/linkedin/server.py",
		"/C/workspace/linkedin/posts.txt",
		"/C/workspace/linkedin/linkedinapp3.py",
		"/C/workspace/linkedin/linkedinapp.py",
		"/C/dev/p3roguelike/map_objects/__init__.py",
		"/C/workspace/linkedin/Best supplements to naturally boost testosterone",
		"/C/Users/Leon/Documents/Emoji/Emoji",
		"/C/workspace/round.py",
		"/C/dev/tweeter/newTweeterEU.py",
		"/C/Users/Leon/Documents/Business/SurveyAspirations",
		"/C/dev/tweeter/tracker.py",
		"/C/workspace/tweetbot/blogTweets.txt",
		"/C/workspace/tweetbot/articleTweets.txt",
		"/C/dev/linkstrip/linkstrip/sourcelinks.txt",
		"/C/dev/linkstrip/linkstrip/targetlinks.txt",
		"/C/Users/Leon/AppData/Local/Temp/Temp1_rltut03.zip/rl tut 03/src/rltut/WorldBuilder.java",
		"/C/Users/Leon/AppData/Local/Temp/Temp1_rltut03 (1).zip/rl tut 03/src/rltut/screens/PlayScreen.java",
		"/C/Users/Leon/AppData/Local/Temp/Temp1_rltut03 (1).zip/rl tut 03/src/rltut/Tile.java",
		"/C/workspace/pygame/game2.py",
		"/C/workspace/pygame/game1.py",
		"/C/workspace/RLtdl/input_handlers.py",
		"/C/workspace/RLtdl/render_functions.py",
		"/C/workspace/RLtdl/components/ai.py",
		"/C/workspace/RLtdl/components/fighter.py",
		"/C/workspace/RLtdl/map_utils.py",
		"/C/Users/Leon/Documents/Suncorp",
		"/C/workspace/RLtdl/entity.py",
		"/C/workspace/RLtdl/game_states.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
			"C:\\dev\\p3roguelike",
			"<open files>,C:\\dev\\p3roguelike",
			"<open files>",
			"C:\\Users\\Leon\\Downloads\\rltut09\\rl tut 09\\src\\rltut",
			"C:\\Users\\Leon\\AppData\\Local\\Temp\\Temp1_rltut09.zip\\rl tut 09\\src\\rltut"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"feat_targeting",
			"there are no valid",
			"if targeting",
			"pick up the",
			"dlevels",
			"player_dead",
			"xp",
			"state",
			"current_targeting_spel",
			"current_targeting_mis",
			"missile_targ",
			"fire_weapon",
			"choose a target for your m",
			"fov_map",
			"spell",
			"character_screen(",
			"deatht",
			"print",
			"makeOrc",
			"makeTroll",
			"makeKobold",
			"makeOrc",
			"death",
			"dead",
			"handle",
			"xp=",
			"xp",
			"print",
			"used action via",
			"perform",
			"perform(",
			"performed",
			"current_targeting_fe",
			"perform(",
			"feat_perform_re",
			"stamina",
			"feat",
			"spell_targeting",
			"spells_menu",
			"ENEMY_TURN",
			"spell_func",
			"TODO",
			"cast(",
			"todo",
			"Effect(",
			"turns_left",
			"poison",
			"assign_po",
			"make_ble",
			")\n",
			"POISON",
			"effects",
			"confusion",
			"EffectNames",
			"effect",
			"TODO",
			"item-added",
			"inventoryt",
			"TODO",
			"print(",
			"TODO",
			"get_equipped",
			"equipment",
			"show_equipment_sc",
			"TODO",
			"make_dropped",
			"make_dropp",
			"TODO",
			"missile_dropped",
			"currently",
			"attack_miss",
			"print(",
			"load(",
			"load",
			"\"s\"",
			"of stuff",
			"ammunition",
			"arrows",
			"get_weapon_sk",
			"quanti",
			"missile_damage_b",
			"weaponcateg",
			"TODO",
			"exit",
			"potion_index",
			"potion_ind",
			"POTION_SC",
			"print(",
			"currently_targeting_cons",
			"spell_tar",
			"spell_t",
			"targeting_item",
			"spell_targeting",
			"action_free = False",
			"game_state = GameStates.PLAYERS_TURN",
			"game_state =",
			"fire_weapon",
			"fired_weapon",
			"self",
			"get_current_missile",
			"self",
			"damage_mess",
			"weapon",
			"TODO",
			"get_current_melee",
			"damage",
			"missile",
			"missile_dam",
			"get_basic",
			"resolve_h",
			"resolve_hit",
			"get_current_mel",
			"get_current_m",
			"melee_damage_bonus",
			"dice_roll",
			"dice",
			"dice_r",
			"d6_d6_dice_roll",
			"dice_roll",
			"TODO",
			"heal(",
			"roll",
			"dice",
			"TODO",
			"print(",
			"Searching",
			"print(",
			"damage_modif"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"make_troll",
			"make_kobold",
			"make_orc",
			"xp_reward",
			"melee_damage",
			"d6_dice_roll",
			"action_free = False",
			"entity",
			"SkillNames.SHIELD",
			"SkillNames.SWORD",
			"entity.fighter.effect_list",
			"make_longsword",
			"make_shortbow",
			"make_longsword",
			"scroll",
			"hit_modifier",
			"damage_modifier",
			"move_system",
			"target.name",
			"true_name",
			"make_heal_book",
			"make_fireball_book",
			"make_confusion_scroll",
			"make_lightning_scroll",
			"make_fireball_scroll",
			"make_poison_potion",
			"make_sword",
			"make_bolts",
			"make_sword",
			"make_leather_armor",
			"make_dagger",
			"make_crossbow",
			"make_bow",
			"make_shield",
			"make_arrows",
			"set_skill_rank",
			"set_skill",
			"get_skill",
			"set_skill",
			"evade",
			"PIERCING",
			"SLASHING",
			"missile",
			"dice_roll",
			"get_block",
			"get_dodge",
			"get_parry",
			"self.owner.stats",
			"PD",
			"",
			" Testosterone ",
			"Testosterone",
			"",
			"    ",
			"https://www.extremeuncertainty.com",
			"",
			"hair",
			"teeth",
			"eyes",
			"weight",
			"height",
			"age",
			"name"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 27,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "loader_functions/constants.py",
					"settings":
					{
						"buffer_size": 2585,
						"regions":
						{
						},
						"selection":
						[
							[
								2361,
								2361
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 420.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "loader_functions/initialize_new_game.py",
					"settings":
					{
						"buffer_size": 5307,
						"regions":
						{
						},
						"selection":
						[
							[
								454,
								454
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 396.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "entity.py",
					"settings":
					{
						"buffer_size": 2145,
						"regions":
						{
						},
						"selection":
						[
							[
								1971,
								1971
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 112.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "engine.py",
					"settings":
					{
						"buffer_size": 5762,
						"regions":
						{
						},
						"selection":
						[
							[
								5585,
								5585
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1890.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "systems/input_process_system.py",
					"settings":
					{
						"buffer_size": 8703,
						"regions":
						{
						},
						"selection":
						[
							[
								6595,
								6595
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2799.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "systems/results_process_system.py",
					"settings":
					{
						"buffer_size": 4641,
						"regions":
						{
						},
						"selection":
						[
							[
								4641,
								4641
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 728.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "map_objects/game_map.py",
					"settings":
					{
						"buffer_size": 7704,
						"regions":
						{
						},
						"selection":
						[
							[
								6734,
								6734
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 330.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "input_handlers.py",
					"settings":
					{
						"buffer_size": 5150,
						"regions":
						{
						},
						"selection":
						[
							[
								1061,
								1061
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "game_states.py",
					"settings":
					{
						"buffer_size": 332,
						"regions":
						{
						},
						"selection":
						[
							[
								332,
								332
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "menus.py",
					"settings":
					{
						"buffer_size": 7519,
						"regions":
						{
						},
						"selection":
						[
							[
								5495,
								5495
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "render_functions.py",
					"settings":
					{
						"buffer_size": 6305,
						"regions":
						{
						},
						"selection":
						[
							[
								5541,
								5541
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1716.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"settings":
					{
						"buffer_size": 12247,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										175,
										186
									],
									[
										2135,
										2147
									],
									[
										3985,
										3997
									],
									[
										5444,
										5456
									],
									[
										5675,
										5687
									],
									[
										6021,
										6039
									],
									[
										7074,
										7088
									],
									[
										7115,
										7129
									],
									[
										8543,
										8557
									],
									[
										8714,
										8728
									],
									[
										11258,
										11272
									],
									[
										11555,
										11569
									],
									[
										11596,
										11610
									],
									[
										11902,
										11916
									],
									[
										12091,
										12105
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								10720,
								10720
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2600.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "death_functions.py",
					"settings":
					{
						"buffer_size": 1312,
						"regions":
						{
						},
						"selection":
						[
							[
								974,
								974
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "systems/move_system.py",
					"settings":
					{
						"buffer_size": 3938,
						"regions":
						{
						},
						"selection":
						[
							[
								439,
								439
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1362.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "components/ai.py",
					"settings":
					{
						"buffer_size": 2653,
						"regions":
						{
						},
						"selection":
						[
							[
								1945,
								1945
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "systems/attack.py",
					"settings":
					{
						"buffer_size": 4838,
						"regions":
						{
						},
						"selection":
						[
							[
								480,
								480
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 66.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "components/fighter.py",
					"settings":
					{
						"buffer_size": 2765,
						"regions":
						{
						},
						"selection":
						[
							[
								1089,
								1089
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 198.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "components/equipment.py",
					"settings":
					{
						"buffer_size": 5068,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2046.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "components/equippable.py",
					"settings":
					{
						"buffer_size": 8776,
						"regions":
						{
						},
						"selection":
						[
							[
								8534,
								8534
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2660.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "components/defender.py",
					"settings":
					{
						"buffer_size": 2180,
						"regions":
						{
						},
						"selection":
						[
							[
								111,
								111
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "mocks.py",
					"settings":
					{
						"buffer_size": 9735,
						"regions":
						{
						},
						"selection":
						[
							[
								9042,
								9042
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 37.0,
						"translation.y": 2826.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "spells.py",
					"settings":
					{
						"buffer_size": 349,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "components/caster.py",
					"settings":
					{
						"buffer_size": 153,
						"regions":
						{
						},
						"selection":
						[
							[
								23,
								23
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 14.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "rltests.py",
					"settings":
					{
						"buffer_size": 39972,
						"regions":
						{
						},
						"selection":
						[
							[
								7398,
								7398
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2442.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "systems/spell_system.py",
					"settings":
					{
						"buffer_size": 2505,
						"regions":
						{
						},
						"selection":
						[
							[
								194,
								194
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 462.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "systems/skill_manager.py",
					"settings":
					{
						"buffer_size": 1694,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "components/skills.py",
					"settings":
					{
						"buffer_size": 736,
						"regions":
						{
						},
						"selection":
						[
							[
								80,
								80
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "systems/feat_system.py",
					"settings":
					{
						"buffer_size": 3403,
						"regions":
						{
						},
						"selection":
						[
							[
								1861,
								1861
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 636.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "feats.py",
					"settings":
					{
						"buffer_size": 541,
						"regions":
						{
						},
						"selection":
						[
							[
								135,
								135
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "components/performer.py",
					"settings":
					{
						"buffer_size": 90,
						"regions":
						{
						},
						"selection":
						[
							[
								90,
								90
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "targeting.py",
					"settings":
					{
						"buffer_size": 321,
						"regions":
						{
						},
						"selection":
						[
							[
								196,
								196
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "systems/pickup_system.py",
					"settings":
					{
						"buffer_size": 386,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								33
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "components/inventory.py",
					"settings":
					{
						"buffer_size": 3490,
						"regions":
						{
						},
						"selection":
						[
							[
								771,
								771
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "generators.py",
					"settings":
					{
						"buffer_size": 1008,
						"regions":
						{
						},
						"selection":
						[
							[
								446,
								446
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "item_factory.py",
					"settings":
					{
						"buffer_size": 4312,
						"regions":
						{
						},
						"selection":
						[
							[
								888,
								888
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "item_functions.py",
					"settings":
					{
						"buffer_size": 7176,
						"regions":
						{
						},
						"selection":
						[
							[
								2325,
								2325
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1320.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "monsters.py",
					"settings":
					{
						"buffer_size": 3649,
						"regions":
						{
						},
						"selection":
						[
							[
								2507,
								2507
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 168.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "components/item.py",
					"settings":
					{
						"buffer_size": 104,
						"regions":
						{
						},
						"selection":
						[
							[
								104,
								104
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 38,
					"file": ".gitignore",
					"settings":
					{
						"buffer_size": 26,
						"regions":
						{
						},
						"selection":
						[
							[
								26,
								26
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 287.0,
	"status_bar_visible": true
}
